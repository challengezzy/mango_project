<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx"  layout="vertical" 
				width="500" height="480" xmlns:containers="flexlib.containers.*" 
				close="PopUpManager.removePopUp(this)" showCloseButton="true" title="高级属性设置"
				creationComplete="init()">
	
	<fx:Declarations>
		
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.utils.StringUtil;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			
			import smartx.bam.flex.modules.common.RefListPanel;
			import smartx.bam.flex.vo.BAMConst;
			import smartx.flex.components.assets.AssetsFileLib;
			import smartx.flex.components.basic.ClientEnviorment;
			import smartx.flex.components.core.BillCardPanel;
			import smartx.flex.components.core.mtchart.vo.MTChartConst;
			import smartx.flex.components.event.UIComponentEvent;
			import smartx.flex.components.itemcomponent.ItemRefPanel;
			import smartx.flex.components.itemcomponent.ext.RefDialog;
			import smartx.flex.components.util.SmartXMessage;
			import smartx.flex.components.vo.GlobalConst;
			import smartx.flex.components.vo.SimpleHashVO;
			import smartx.flex.components.vo.SimpleRefItemVO;
			import smartx.flex.components.vo.TableDataStruct;
			import smartx.flex.components.vo.TempletItemVO;

			private var contentXml:XML;
			[Bindable]
			public var confirmFunc:Function;
			
			[Bindable]
			public var dataValue:Object;
			
			[Bindable]
			public var bcp:BillCardPanel;
			
			[Bindable]
			private var analyzerTypeCol:ArrayCollection = new ArrayCollection();
			
			protected var bvNameRefPanel:ItemRefPanel;
			//关系型数据源参照
			protected var relationDSRefPanel:ItemRefPanel;
			//查询视图参照
			protected var queryViewRefPanel:ItemRefPanel;
			
			//系统字典参照
			protected var sysdicRefPanel:ItemRefPanel;
			
			protected var destination:String = GlobalConst.SERVICE_FORM;
			
			protected var destination_bam:String = BAMConst.BAM_Service;
			
			protected var rpc:RemoteObject;
			
			protected var formService:RemoteObject;
			
			protected var endpoint:String;
			
			protected var bvWindow:String;
			
			protected var bvName:String;
			
			protected var tableName:String;
			//所选数据表的数据结构
			protected var tableDataStruct:TableDataStruct;
			//判断关联表是否发生了变化
			protected var isTableChanged:Boolean = false;
			/**
			 * EPL and sql 
			 * */
			protected var sql:String;
			
			private var queryViewDs:String;
			
			private var queryViewCode:String;
			
			private var queryViewName:String;
			
			private var code:String;
			
			[Bindable]
			private var colProvider:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			private var refProvider:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			private var refHeadProvider:Array = new Array();
			
			[Bindable]
			private var isVisible:Boolean = false;
			
			[Bindable]
			private var analyzeProvider:ArrayCollection = new ArrayCollection(
				[
					{label:"字符分析器",data:"StringAnalyzer"},
					{label:"数字分析器",data:"NumberAnalyzer"},
					{label:"布尔分析器",data:"BooleanAnalyzer"},
					{label:"时间分析器",data:"DateAnalyzer"},
					{label:"值分析器",data:"ValueAnalyzer"},
					{label:"周期分析器",data:"WeekDayAnalyzer"}
					//{label:"匹配分析器",data:"MatchAnalyzer"}
				]
			);
			
			[Bindable]
			private var typeProvider:ArrayCollection = new ArrayCollection(
				[
					{label:"业务视图",data:"BUSINESSVIEW"},
					{label:"查询视图",data:"QUERYVIEW"}
				]
			);
			
			public function getContentXml():String{
				showXml();
				return contentXml.toXMLString();
			}
			
			private function init():void{
				
				if(endpoint == null)
					endpoint = String(ClientEnviorment.getInstance().getVar(ClientEnviorment.KEY_SERVICE_ENDPOINT));
				rpc = new RemoteObject(destination_bam);
				rpc.endpoint = endpoint;
				
				formService = new RemoteObject(destination);
				formService.endpoint = endpoint;
				
				generalForm_creationCompleteHandler();
				
				rpc.getTableStructByName.addEventListener(ResultEvent.RESULT,getTableStructByNameHandler);
				rpc.getTableStructByName.addEventListener(FaultEvent.FAULT,faultHander);
				
				formService.getSimpleHashVoArrayByDS.addEventListener(ResultEvent.RESULT,getSimpleHashVoArrayByDSHandler);
				formService.getSimpleHashVoArrayByDS.addEventListener(FaultEvent.FAULT,faultHander);
				
				initEditInfo();
				
			}
			
			private function initEditInfo():void{
				
				var metaStr:String = dataValue["METADATA"] as String;
				if(metaStr != null && metaStr != ""){
					
					var xml:XML = new XML(metaStr);
				
					var dsType:String = xml.datasource.@type;
					var dsCode:String = xml.datasource;
					if(dsType.toUpperCase() == "BUSINESSVIEW"){
						dataSourcetypeCbo.selectedIndex = 0;
						typeCboChangeHandler(null);
						formService.getSimpleHashVoArrayByDS(null,"select CODE,STREAMWINDOWNAME,NAME,'BV' TYPE from bam_businessview where code='"+dsCode+"'");
						
					}else if(dsType.toUpperCase() == "QUERYVIEW"){
						dataSourcetypeCbo.selectedIndex = 1;
						typeCboChangeHandler(null);
						formService.getSimpleHashVoArrayByDS(null,"select CODE,DATASOURCENAME,TO_CHAR(SQL) SQL,NAME,'QV' TYPE from bam_queryview where code='"+dsCode+"'");
					}
					
					var analyzerType:String = xml.analyzer.@type;
					if(analyzerType.toLowerCase()=="StringAnalyzer".toLowerCase()){
						analyzeTypeCob.selectedIndex = 0;
					}else if(analyzerType.toLowerCase()=="NumberAnalyzer".toLowerCase()){
						analyzeTypeCob.selectedIndex = 1;
					}else if(analyzerType.toLowerCase()=="BooleanAnalyzer".toLowerCase()){
						analyzeTypeCob.selectedIndex = 2;
					}else if(analyzerType.toLowerCase()=="DateAnalyzer".toLowerCase()){
						analyzeTypeCob.selectedIndex = 3;
					}else if(analyzerType.toLowerCase()=="ValueAnalyzer".toLowerCase()){
						analyzeTypeCob.selectedIndex = 4;
					}else if(analyzerType.toLowerCase() =="WeekDayAnalyzer".toLowerCase()){
						analyzeTypeCob.selectedIndex = 5;
					}else if(analyzerType.toLowerCase() =="MatchAnalyzer".toLowerCase()){
						analyzeTypeCob.selectedIndex = 6;
					}
					
					var inputColumns:String = xml.analyzer.@inputColumn;
					var colArray:Array = inputColumns.split(",");
					for each(var item:Object in colArray){
						var obj:Object = new Object();
						var valueTemp:String = item as String;;
						if(valueTemp != null && valueTemp != ""){
							obj["fieldName"] = valueTemp;
							colProvider.addItem(obj);
						}
					}
					
				}
			}
			
			private function getSimpleHashVoArrayByDSHandler(event:ResultEvent):void{
				var dataValues:* = event.result as Array;
				for each(var vo:SimpleHashVO in dataValues){
					var dsType:String = vo.dataMap["type"] as String;
					code = vo.dataMap["code"] as String;
					var simpleRefItemVO:SimpleRefItemVO = new SimpleRefItemVO();
					simpleRefItemVO.name = vo.dataMap["name"];
					if(dsType == "BV"){
						bvNameRefPanel.data = {"bvname":simpleRefItemVO};
						var ds:String = GlobalConst.CEP_DATASOURCE_PREFIX + GlobalConst.DEFAULTPROVIDERNAME_CEP;
						bvWindow = vo.dataMap["streamwindowname"] as String;
						rpc.getTableStructByName(ds,"select * from "+bvWindow+" where 1=2");
					}else if(dsType == "QV"){
						queryViewRefPanel.data ={"queryView":simpleRefItemVO};
						var queryViewDs:String = vo.dataMap["datasourcename"] as String;
						tableName = vo.dataMap["sql"] as String;
						rpc.getTableStructByName(queryViewDs, "select * from ("+tableName+") where 1=2");
					}
				}
			}
			
			private function faultHander(event:FaultEvent):void{
				SmartXMessage.show("错误!",SmartXMessage.MESSAGE_ERROR,
					"错误详情:"+event.fault.faultString);
			}
			
			public function initGeneralForm():void{
				dataSourcetypeCbo.selectedIndex = 0;
				typeCboChangeHandler(null);
				initRefPanel();
				initQueryViewRefPanel();
			}
			
			private function initRefPanel():void{
				if(bvNameRefPanel != null)
					viewname.removeChild(bvNameRefPanel);
				var templetItemVO:TempletItemVO = new TempletItemVO();
				templetItemVO.itemtype="参照";
				templetItemVO.itemname="业务视图";
				templetItemVO.itemkey="bvname";
				templetItemVO.refdesc="select code id#,streamwindowname code#,name 名称 from bam_businessview;ds=datasource_default";
				bvNameRefPanel = new ItemRefPanel(templetItemVO,destination,endpoint,false,false);
				bvNameRefPanel.addEventListener(UIComponentEvent.REAL_VALUE_CHANGE,function():void{
					if(bvNameRefPanel.returnVO != null){
						
						colProvider.removeAll();
						colDataGrid.invalidateList();
						
						code = bvNameRefPanel.returnVO.id;
						bvWindow = bvNameRefPanel.returnVO.code;
						bvName = bvNameRefPanel.returnVO.name;
						
						var sql:String = "select * from "+bvWindow+" where 1=2";
						var ds:String = GlobalConst.CEP_DATASOURCE_PREFIX + GlobalConst.DEFAULTPROVIDERNAME_CEP;
						
						rpc.getTableStructByName(ds,sql);
					}
				});
				viewname.addChild(bvNameRefPanel);
			}
			
			private function initQueryViewRefPanel():void{
				if(queryViewRefPanel != null)
					queryViewname.removeChild(queryViewRefPanel);
				var templetItemVO:TempletItemVO = new TempletItemVO();
				templetItemVO.itemtype="参照";
				templetItemVO.itemname="查询视图";
				templetItemVO.itemkey="queryView";
				templetItemVO.refdesc="select id as id#,code as code#,name 名称 from V_BAM_QUERYVIEW_REF;ds=datasource_default";
				queryViewRefPanel = new ItemRefPanel(templetItemVO,destination,endpoint,false,false);
				queryViewRefPanel.addEventListener(UIComponentEvent.REAL_VALUE_CHANGE,function():void{
					if(queryViewRefPanel.returnVO != null){
						
						colProvider.removeAll();
						colDataGrid.invalidateList();
						
						var temp:String = queryViewRefPanel.returnVO.code;
						var array:Array = temp.split(";");
						queryViewCode = queryViewRefPanel.returnVO.id;
						code = queryViewRefPanel.returnVO.id;
						queryViewDs = array[1] as String;
						queryViewName = queryViewRefPanel.returnVO.name;
						tableName = array[0] as String;
						
						var sql:String = "select * from ("+tableName+") where 1=2";
						
						rpc.getTableStructByName(queryViewDs, sql);
						
					}
				});
				queryViewname.addChild(queryViewRefPanel);
			}
			
			protected function showXml():void{
					
					contentXml = new XML("<root></root>");
					
					var temp:String ="<datasource>"+code+"</datasource>";
					var datasourceXml:XML = new XML(temp);
					var dsType:Object = dataSourcetypeCbo.selectedItem;
					datasourceXml.@type = dsType["data"] as String;
					
					contentXml.appendChild(datasourceXml);
					
					var colStr:String = new String("");
					var i:int = 1;
					for each(var item:Object in colProvider){
						var col:String = item["fieldName"] as String;
						if(i==colProvider.length){
							colStr = colStr+col;
						}else{
							colStr = colStr+col+",";
						}
						i++;
					}
					var anaType:Object = analyzeTypeCob.selectedItem;
					var analyzerType:String = anaType["data"] as String;
					
					var analyzerXml:XML = new XML("<analyzer />");
					analyzerXml.@inputColumn = colStr;
					analyzerXml.@type = analyzerType;
					
					contentXml.appendChild(analyzerXml);
					
					mtcodeText.text = contentXml.toString();
				
			}
			
			protected function getTableStructByNameHandler(event:ResultEvent):void{
				
				tableDataStruct = event.result as TableDataStruct;
				refProvider.removeAll();
				for(var i:int = 0;i<tableDataStruct.table_header.length;i++){
					var tempObj:Object = new Object();
					tempObj["fieldName"] = tableDataStruct.table_header[i] as String;
					tempObj["fieldType"] = tableDataStruct.table_body_type[i] as String;
					
					refProvider.addItem(tempObj);
				}
			}
			
			private function typeCboChangeHandler(event:ListEvent):void{
				var item:Object = dataSourcetypeCbo.selectedItem;
				var value:String = item["data"] as String;
				var childIndex:int = generalForm.getChildIndex(dataSourceTypeFormItem);
				if(value == "BUSINESSVIEW"){//业务视图

					if(generalForm.contains(queryViewname))
						generalForm.removeChild(queryViewname);
					
					if(!generalForm.contains(viewname))
						generalForm.addChildAt(viewname,childIndex+1);

				}else if(value == "QUERYVIEW"){//查询视图
					
					if(generalForm.contains(viewname))
						generalForm.removeChild(viewname);
					
					if(!generalForm.contains(queryViewname))
						generalForm.addChildAt(queryViewname,childIndex+1);
				}
			}
			
			protected function generalForm_creationCompleteHandler():void{
				
				var col1:DataGridColumn = new DataGridColumn();
				col1.headerText="字段名称";
				col1.dataField="fieldName";
				
				var col2:DataGridColumn = new DataGridColumn();
				col2.headerText="字段类型";
				col2.dataField="fieldType";
				
				refHeadProvider.push(col1);
				refHeadProvider.push(col2);
				
				initGeneralForm();
			}
			
			protected function addBtn_clickHandler(event:MouseEvent):void
			{
				var dialog:RefListPanel = new RefListPanel();
				dialog.dataList = getDataProvider();
				dialog.headerItems = refHeadProvider;
				dialog.title = "选择字段";
				dialog.addEventListener(CloseEvent.CLOSE,function(event:CloseEvent):void{
					if(dialog.closeByConfirm){
						
						for each(var item:Object in dialog.seletedItemsArray){
							var fieldName:String = item["fieldName"] as String;
							if(!isContains(fieldName)){
								var itemTemp:Object = new Object();
								itemTemp["fieldName"] = fieldName;
								colProvider.addItem(itemTemp);
							}
						}
						
						colDataGrid.invalidateList();
					}
				});
				PopUpManager.addPopUp(dialog,this,true);
				PopUpManager.centerPopUp(dialog);
				
			}
			
			private function isContains(fieldName:String):Boolean{
				var isCon:Boolean = false;
				for each(var item:Object in colProvider){
					var tempFieldName:String = item["fieldName"] as String;
					if(fieldName != null && fieldName.toLowerCase() == tempFieldName.toLowerCase()){
						isCon = true;
						break;
					}
				}
				return isCon;
			}
			
			protected function musBtn_clickHandler(event:MouseEvent):void
			{
				var array:Array = colDataGrid.selectedIndices;
				if(array == null || array.length ==0 ){
					Alert.show("请选择一行数据！","错误");
					return;
				}
				
				for each(var item:Object in array){
					var index:int = item as int;
					colProvider.removeItemAt(index);
				}
				
				colDataGrid.invalidateList();
				
			}
			
			private function getDataProvider():ArrayCollection{
				
				var dp:ArrayCollection = new ArrayCollection();
				var analyzerItem:Object = analyzeTypeCob.selectedItem;
				var analyzerType:String = analyzerItem["data"] as String;
				
				if(analyzerType == "StringAnalyzer"){
					
					for each(var objStr:Object in refProvider){
						var fieldTypeStr:String = objStr["fieldType"] as String;
						if(fieldTypeStr.toLowerCase()=="string"||fieldTypeStr.toLowerCase()=="varchar"||fieldTypeStr.toLowerCase()=="varchar2"){
							dp.addItem(objStr);
						}
					}
				}else if(analyzerType == "NumberAnalyzer"){
					
					for each(var objNum:Object in refProvider){
						var fieldTypeNum:String = objNum["fieldType"] as String;
						if(fieldTypeNum.toLowerCase()=="number"||fieldTypeNum.toLowerCase()=="int"||fieldTypeNum.toLowerCase()=="integer"||fieldTypeNum.toLowerCase()=="float"||fieldTypeNum.toLowerCase()=="double"){
							dp.addItem(objNum);
						}
					}
				}else if(analyzerType == "BooleanAnalyzer"){
					
					for each(var objBool:Object in refProvider){
						var fieldTypeBool:String = objBool["fieldType"] as String;
						if(fieldTypeBool.toLowerCase()=="boolean"||fieldTypeBool.toLowerCase()=="bool"){
							dp.addItem(objBool);
						}
					}
					
				}else if(analyzerType == "DateAnalyzer" || analyzerType == "WeekDayAnalyzer" ){
					
					for each(var objDate:Object in refProvider){
						var fieldTypeDate:String = objDate["fieldType"] as String;
						if(fieldTypeDate.toLowerCase()=="date"||fieldTypeDate.toLowerCase()=="timestamp"){
							dp.addItem(objDate);
						}
					}
				}else if(analyzerType == "ValueAnalyzer" || analyzerType == "MatchAnalyzer" ){
					for each(var objValue:Object in refProvider){
							dp.addItem(objValue);
					}
				}
				
				return dp;
			}
			
			protected function analyzeTypeCob_changeHandler(event:ListEvent):void
			{
				var item:Object = analyzeTypeCob.selectedItem;
				var value:String = item["data"] as String;
				if(value=="MatchAnalyzer"){
					isVisible = true;
				}else{
					
				}
			}
			
			protected function submitBtn_clickHandler(event:MouseEvent):void
			{
				dataValue["METADATA"] = getContentXml();
				
				bcp.setDataValue(dataValue);
				
				close();
				
			}
			
			private function close():void{
				PopUpManager.removePopUp(this);
			}
			
		]]>
	</fx:Script>
	<mx:VBox width="100%" height="100%" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
		<mx:TabNavigator width="100%" height="100%" creationPolicy="all">
			
			<mx:VBox id="generalVBox" width="100%" height="100%" label="通用">
				
				<mx:HBox id="generalForm" width="100%" paddingLeft="5" >
					<mx:FormItem label="类型:" id="dataSourceTypeFormItem">
						<mx:ComboBox id="dataSourcetypeCbo" labelField="label" change="typeCboChangeHandler(event)" dataProvider="{typeProvider}" />
					</mx:FormItem>
					<mx:FormItem label="业务视图:" required="true" id="viewname" />
					<mx:FormItem label="查询视图:" required="true" id="queryViewname" />
				</mx:HBox>
				
				<mx:HBox width="100%">
					<mx:Label text="分析器:" /><mx:ComboBox id="analyzeTypeCob" labelField="label" 
														 change="analyzeTypeCob_changeHandler(event)" dataProvider="{analyzeProvider}" />
					<mx:FormItem label="字典值:" required="true" id="matchFieldName" visible="{isVisible}" />
				</mx:HBox>
				
				<mx:HBox width="100%" >
					<mx:LinkButton id="addBtn" icon="{AssetsFileLib.addIcon}" width="22" height="22" toolTip="添加" click="addBtn_clickHandler(event)"/>
					<mx:LinkButton id="musBtn" icon="{AssetsFileLib.minuseIcon}" width="22" height="22" toolTip="删除" click="musBtn_clickHandler(event)"/>
				</mx:HBox>
				<mx:DataGrid id="colDataGrid" width="100%" height="100%" editable="false" dataProvider="{colProvider}" allowMultipleSelection="true" >
					<mx:columns>
						<mx:DataGridColumn headerText="字段名称" editable="false" dataField="fieldName" />
					</mx:columns>	
				</mx:DataGrid>
				
			</mx:VBox>
			
			<!--<mx:VBox id="setVBox" width="100%" height="100%" label="设置" />-->
			
			<mx:VBox id="mtcodeVBox" width="100%" height="100%" label="元数据" show="showXml()">
				<mx:TextArea id="mtcodeText" width="100%" height="100%" editable="false"/>
			</mx:VBox>
			
		</mx:TabNavigator>
		<mx:HBox width="100%" horizontalAlign="center">
			<mx:Button id="submitBtn" label="确定" click="submitBtn_clickHandler(event)"/>
			<mx:Button label="取消" click="close()"/>
		</mx:HBox>
	</mx:VBox>
</mx:TitleWindow>