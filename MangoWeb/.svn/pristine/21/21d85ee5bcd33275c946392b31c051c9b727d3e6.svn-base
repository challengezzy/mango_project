<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx"
				layout="vertical"
				width="500" height="200" xmlns:containers="flexlib.containers.*" 
				close="close()" showCloseButton="true" title="高级属性设置"
				creationComplete="init()">
	
	<fx:Declarations>
		
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.utils.StringUtil;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.TextInput;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.mxml.RemoteObject;
			
			import smartx.flex.components.assets.AssetsFileLib;
			import smartx.flex.components.basic.ClientEnviorment;
			import smartx.flex.components.core.BillCardPanel;
			import smartx.flex.components.core.cep.CEPUtils;
			import smartx.flex.components.core.mtchart.vo.MTChartConst;
			import smartx.flex.components.event.UIComponentEvent;
			import smartx.flex.components.itemcomponent.ItemRefPanel;
			import smartx.flex.components.itemcomponent.ext.RefDialog;
			import smartx.flex.components.util.MetadataTempletUtil;
			import smartx.flex.components.util.SmartXMessage;
			import smartx.flex.components.vo.GlobalConst;
			import smartx.flex.components.vo.MetadataTemplet;
			import smartx.flex.components.vo.SimpleHashVO;
			import smartx.flex.components.vo.SimpleRefItemVO;
			import smartx.flex.components.vo.TableDataStruct;
			import smartx.flex.components.vo.TempletItemVO;
			
			private var mtcodeSql:String ="select id as id#,code 编码,name as 名称 from pub_metadata_templet";
			private var templeteSql:String ="select t.templetcode as id#,t.templetcode 编码,t.templetname as 名称 from PUB_TEMPLET_1 t";
			
			[Bindable]
			public var dateValue:Object;
			
			[Bindable]
			public var bcp:BillCardPanel;
			
			[Bindable]
			private var refProvider:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			private var refHeadProvider:Array = new Array();
			
			[Bindable]
			private var pathTxt:TextInput = new TextInput();
			
			[Bindable]
			private var cutPathObj:Object = new Object();
			
			private function init():void{
				
				var metadataTemplet:MetadataTemplet = MetadataTempletUtil.getInstance().findMetadataTemplet("MT_SYSTEMCONFIG");
				var xml:XML = metadataTemplet.contentXML;
				
				
				cutPathObj["pathName"] = "自定义类型";
				cutPathObj["pathValue"] = "";
				cutPathObj["params"] = null;
				
				refProvider.addItem(cutPathObj);
				
				for each(var ruleXml:XML in xml.rules.rule){
					var pathObj:Object = new Object();
					var name:String = ruleXml.@name;
					var value:String =ruleXml.base;
					var params:String =ruleXml.params;
					
					pathObj["pathName"] = name;
					pathObj["pathValue"] = value;
					pathObj["params"] = ruleXml.params;
					
					refProvider.addItem(pathObj);
					
				}
				
				initEditInfo();
				
			}
			
			private function initEditInfo():void{
				
				var commStr:String = dateValue["COMMAND"];
				
				if(commStr != null && StringUtil.trim(commStr) != "" ){
					
					paramVbox.removeAllChildren();
					
					var tempArr:Array = commStr.split("?");
					
					if(tempArr != null && tempArr.length>0){
						var path:String;
						var params:String;
						var obj:Object;
						for(var i:int = 0; i<tempArr.length; i++){
							if(i == 0){
								path = tempArr[i] as String;
							}else{
								params = tempArr[i] as String;
							}
						}
						
						if(path != null){
							obj = this.findPath(path);
							pathCob.selectedItem = obj;
							var pathValue:String = obj["pathValue"] as String;
							if(pathValue == null || pathValue == "" ){
								pathTxt.text = path;
								pathCob_changeHandler(null);
							}
							
 						}
						
						if(params != null ){
							var paramsArr:Array = params.split("&");
							if(paramsArr != null && paramsArr.length >0){
								paramVbox.removeAllChildren();
								for each(var paramTemp:String in paramsArr){
									var paramInfoTempArr:Array = paramTemp.split("\=");
									if(paramInfoTempArr != null && paramInfoTempArr.length >0){
										var mpi:MenuParamInput = new MenuParamInput();
										for(var j:int=0; j<paramInfoTempArr.length; j++ ){
											if(j == 0){
												var key:String = paramInfoTempArr[j] as String;
												var tempSQL:String = getParamSQL(key,obj);
												mpi.fetchSql = tempSQL;
												mpi.labelName = key;
												
											}else{
												var value:String = paramInfoTempArr[j] as String;
												mpi.dataValue = value;
											}
											
											paramVbox.addChild(mpi);
										}
									}
								}
							}
						}
					}
				}else{
					pathCob.selectedItem = cutPathObj;
					pathCob_changeHandler(null);
				}
				
			}
			
			private function findPath(pathValue:String):Object{
				var tempObj:Object = null;
				var cutObj:Object = null;
				for each(var obj:Object in refProvider){
					var tempPathValue:String = obj["pathValue"] as String;
					if(StringUtil.trim(tempPathValue)==""){
						cutObj = obj;
					}
					if(tempPathValue !="" && pathValue !="" && pathValue != null && tempPathValue != null && StringUtil.trim(pathValue)==StringUtil.trim(tempPathValue)){
						tempObj = obj;
						break;
					}
				}
				if(tempObj == null ){
					tempObj = cutObj;
				}
				return tempObj;
			}
			
			private function getParamSQL(paramName:String,rule:Object):String{
				var tempSQL:String ="";
				var paramsXml:XMLList = rule["params"];
				if(paramsXml != null){
					for each(var paramXML:XML in paramsXml.param){
						var tempParamName:String = paramXML.@name;
						var type:String = paramXML.@type;
						if(type != null && type.toLowerCase()=="ref" && tempParamName == paramName){
							var sql:String = paramXML.@sql;
							tempSQL = sql;
							break;
						}
					}
				}

				return tempSQL;
			}
			
			protected function submitBtn_clickHandler(event:MouseEvent):void
			{
				var item:Object = pathCob.selectedItem;
				
				if(item != null ){
					var path:String;
					var pathName:String = item["pathName"] as String;
					if(pathName == "自定义类型" ){
						path = pathTxt.text;
					}else{
						path = item["pathValue"] as String;
					}
					
					var childrenArr:Array = paramVbox.getChildren();
					var params:String = "";
					if(childrenArr != null && childrenArr.length >0 ){
						for(var i:int =0; i<childrenArr.length; i++){
							var dis:DisplayObject = childrenArr[i];
							if(dis is MenuParamInput){
								var tempMPI:MenuParamInput = dis as MenuParamInput;
								var tempParamValue:String = tempMPI.getDataValue();
								var paramName:String = tempMPI.labelName;
								if(params == null || params == ""){
									if(tempParamValue != null && tempParamValue != ""){
										params = paramName+"="+tempParamValue;
									}
								}else{
									if(tempParamValue != null && tempParamValue != ""){
										params = params.concat(paramName+"="+tempParamValue);
									}
								}
							}
						}
					}
					
					var url:String = "";
					if(path != null && path != ""){
						url = url.concat(path);
					}
					
					if(params != null && params != ""){
						url = url.concat("?").concat(params);
					}
					
					if(dateValue != null ){
						dateValue["COMMAND"] = url;
						bcp.setDataValue(dateValue);
					}
				}
				
				close();
				
			}
			
			protected function close():void{
				PopUpManager.removePopUp(this)
			}
			
			protected function pathCob_changeHandler(event:ListEvent):void
			{
				var item:Object = pathCob.selectedItem;
				if(item != null ){
					var path:String = item["pathValue"] as String;
					if(path == null || path == ""){
						paramVbox.removeAllChildren();
						pathTxt.percentWidth = 100;
						pathTxt.height = 25;
						pathTxtBox.addChild(pathTxt);
					}else{
						if(pathTxtBox.contains(pathTxt)){
							pathTxtBox.removeChild(pathTxt);
						}
						
						var paramsXml:XMLList = item["params"];
						paramVbox.removeAllChildren();
						for each(var paramXML:XML in paramsXml.param){
							var paramName:String = paramXML.@name;
							var type:String = paramXML.@type;
							var mpi:MenuParamInput = new MenuParamInput();
							mpi.labelName = paramName;
							if(type != null && type.toLowerCase()=="ref"){
								var sql:String = paramXML.@sql;
								mpi.fetchSql = sql;
							}
							
							paramVbox.addChild(mpi);
						}
						
					}
				}
				
			}
			
		]]>
	</fx:Script>
	<mx:VBox width="100%" height="100%" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
		
		<mx:VBox width="100%" height="100%" creationPolicy="all">

			<mx:HBox width="100%">
				<mx:Label text="类型:" /><mx:ComboBox id="pathCob" labelField="pathName" change="pathCob_changeHandler(event)" dataProvider="{refProvider}" />
				<mx:HBox id = "pathTxtBox" width="100%" />
			</mx:HBox>
			
			<mx:VBox width="100%" >
				<mx:Label text="参数:" fontSize="13" />
				<mx:VBox id="paramVbox" width="100%" height="100%" />
			</mx:VBox>
			
		</mx:VBox>
		
		<mx:HBox width="100%" horizontalAlign="center" verticalAlign="bottom">
			<mx:Button id="submitBtn" label="确定" click="submitBtn_clickHandler(event)"/>
			<mx:Button label="取消" click="close()"/>
		</mx:HBox>
	
	</mx:VBox>
</mx:TitleWindow>