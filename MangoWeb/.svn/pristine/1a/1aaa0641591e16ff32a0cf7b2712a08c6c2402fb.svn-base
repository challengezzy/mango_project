<?xml version="1.0" encoding="utf-8"?>
<entitytab:AbstractTab xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" 
					   xmlns:entitytab="smartx.bam.flex.modules.entitymodel.entitytab.*" 
					   width="100%" height="100%" label="数据编辑" creationComplete="creationCompleteHandler()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.adobe.utils.StringUtil;
			
			import mx.collections.ArrayCollection;
			import mx.effects.Effect;
			import mx.events.ListEvent;
			
			import org.efflex.mx.viewStackEffects.CoverFlowPapervision3D;
			
			import smartx.bam.flex.vo.BAMConst;
			import smartx.flex.components.assets.AssetsFileLib;
			import smartx.flex.components.core.cep.CEPUtils;
			import smartx.flex.components.util.SmartXMessage;
			
			[Bindable]
			private var selectedEditor:Object;//选中的编辑方案
			[Bindable]
			private var switchEffect:Effect;
			[Bindable]
			private var isEdit:Boolean = true; //是否为编辑状态
			[Bindable]
			private var editorTypeCboDp:ArrayCollection = new ArrayCollection([
				{name:"卡片",data:BAMConst.ENTITYEDITOR_TYPE_CARD},
				{name:"列表卡片",data:BAMConst.ENTITYEDITOR_TYPE_LISTCARD}
			]);
			
			private var isReturn:Boolean = true;
			
			private function creationCompleteHandler():void{
				if(switchEffect == null)
					switchEffect = new CoverFlowPapervision3D();
			}
			
			private function addEditor():void{
				isEdit = false;
				main.selectedChild = editorCardVbox;
				selectedEditor = <editor />;
			}
			
			private function deleteEditor():void{
				if(editorDg.selectedIndex < 0)
					return;
				CEPUtils.xmlDeleteNode(XML(editorDg.selectedItem));
			}
			
			private function onReturn():void{
				main.selectedChild = editorListVbox;
			}
			
			private function onSave():void{
				isReturn = true;
				if(StringUtil.trim(editorNameTxt.text) == ""){
					SmartXMessage.show("名称不能为空",SmartXMessage.MESSAGE_ERROR);
					isReturn = false;
					return;
				}
				
				if(!isEdit){//如果是新增
					if(StringUtil.trim(editorCodeTxt.text) == ""){
						SmartXMessage.show("编码不能为空",SmartXMessage.MESSAGE_ERROR);
						isReturn = false;
						return;
					}
					
					if(selectedItem.content.editors.editor.(@code==editorCodeTxt.text).length() > 0){
						SmartXMessage.show("该编码已存在！",SmartXMessage.MESSAGE_ERROR);
						isReturn = false;
						return;
					}
					
					if(editorTypeCbo.selectedIndex < 0){
						SmartXMessage.show("请选择类型！",SmartXMessage.MESSAGE_ERROR);
						isReturn = false;
						return;
					}
				}
				selectedEditor.@name = editorNameTxt.text;
				selectedEditor.@code = editorCodeTxt.text;
				selectedEditor.@type = editorTypeCbo.selectedItem.data;
				selectedEditor.@saveTable = saveTableTxt.text;
				selectedEditor.@pkSequence = pkSequenceTxt.text;
				selectedEditor.@templetCode = "[ENTITY]".concat(contentXml.entityModelCode).concat("//")
												.concat(selectedItem.content.@code).concat("//").concat(editorCodeTxt.text);
				selectedEditor.@pkName = StringUtil.trim(pkNameTxt.text)==""?selectedItem.content.@code:StringUtil.trim(pkNameTxt.text);
				if(!isEdit)
					selectedItem.content.editors.appendChild(selectedEditor);
				refreshEditorDg();
			}
			
			private function onSaveAndReturn():void{
				onSave();
				if(isReturn)
					onReturn();
			}
			
			private function editorDg_itemDoubleClickHandler(event:ListEvent):void{
				isEdit = true;
				main.selectedChild = editorCardVbox;
				selectedEditor = editorDg.selectedItem;
				initSelectedEditor();
			}
			
			private function initSelectedEditor():void{
				for each(var data:Object in editorTypeCboDp){
					if(data.data == String(selectedEditor.@type)){
						editorTypeCbo.selectedItem = data;
						break;
					}else
						editorTypeCbo.selectedItem = null;
				}
			}
			
			public function showHandler():void{
				if(selectedItem.content.editors.length() == 0)
					selectedItem.content.appendChild(<editors />);
				onReturn();
			}
			
			private function typeLabelFun(item:Object, column:DataGridColumn):String{
				for each(var data:Object in editorTypeCboDp){
					if(data.data == String(item.@type))
						return data.name;
				}
				
				return "";
			}
			
			private function preview():void{
				if(editorDg.selectedIndex < 0){
					SmartXMessage.show("请先选择编辑方案！");
				}
			}
			
			private function refreshEditorDg():void{
				editorDg.dataProvider = selectedItem.content.editors.editor;
				editorDg.invalidateList();
			}
			
		]]>
	</fx:Script>
	<mx:ViewStack id="main" width="100%" height="100%">
		<mx:VBox id="editorListVbox" width="100%" height="100%" paddingBottom="5" paddingLeft="5"
				 paddingRight="5" paddingTop="5" showEffect="{switchEffect}" hideEffect="{switchEffect}">
			<mx:HBox width="100%">
				<mx:Button icon="{AssetsFileLib.addIcon}" width="22" height="22" toolTip="新建" click="addEditor()"/>
				<mx:Button icon="{AssetsFileLib.minuseIcon}" width="22" height="22" toolTip="删除" click="deleteEditor()"/>
				<mx:Button icon="{AssetsFileLib.viewIcon}" width="22" height="22" toolTip="预览" click="preview()"/>
			</mx:HBox>
			
			<mx:DataGrid id="editorDg" width="100%" height="100%" dataProvider="{selectedItem.content.editors.editor}"
						 doubleClickEnabled="true" itemDoubleClick="editorDg_itemDoubleClickHandler(event)" editable="false">
				<mx:columns>
					<mx:DataGridColumn headerText="名称" dataField="@name" />
					<mx:DataGridColumn headerText="编码" dataField="@code" />
					<mx:DataGridColumn headerText="类型" dataField="@type" labelFunction="typeLabelFun"/>
					<mx:DataGridColumn headerText="是否为默认编辑方案" dataField="@isDefault" rendererIsEditor="true">
						<mx:itemRenderer>
							<fx:Component>
								<mx:HBox horizontalAlign="center" width="100%">
									<fx:Script>
										<![CDATA[
											public function get text():String{
												return data.@isDefault;
											}
											
											override public function set data(value:Object):void{
												super.data = value;
												if(value != null){
													isDefaultChk_changeHandler(null);
												}
											}
											
											protected function isDefaultChk_changeHandler(event:Event):void{
												if(isDefaultChk.selected){
													for each(var editor:XML in outerDocument.selectedItem.content.editors.editor){
														if(String(editor.@code) != String(data.@code))
															editor.@isDefault = "false";
													}
													data.@isDefault = "true";
												}else
													data.@isDefault = "false";
											}
											
										]]>
									</fx:Script>
									<mx:CheckBox id="isDefaultChk" selected="{data.@isDefault=='true'?true:false}" 
												 change="isDefaultChk_changeHandler(event)"/>
								</mx:HBox>
							</fx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn>
				</mx:columns>
			</mx:DataGrid>
		</mx:VBox>
		<mx:VBox id="editorCardVbox" width="100%" height="100%" paddingBottom="5" paddingLeft="5"
				 paddingRight="5" paddingTop="5" showEffect="{switchEffect}" hideEffect="{switchEffect}">
			<mx:HBox width="100%">
				<mx:Button label="返回" toolTip="返回列表" click="onReturn()" icon="{AssetsFileLib.returnIcon}"/>
				<mx:Button label="保存并返回" toolTip="保存当前信息并返回列表" click="onSaveAndReturn()" icon="{AssetsFileLib.savereturnIcon}"/>
				<mx:Button label="保存" toolTip="保存当前信息" click="onSave()" icon="{AssetsFileLib.saveIcon}"/>
			</mx:HBox>
			<mx:HBox width="100%">
				<mx:Label text="名称" width="25%" />
				<mx:TextInput id="editorNameTxt" width="50%" text="{selectedEditor.@name}" />
			</mx:HBox>
			<mx:HBox width="100%">
				<mx:Label text="编码" width="25%" />
				<mx:TextInput id="editorCodeTxt" width="50%" text="{selectedEditor.@code}" editable="{!isEdit}" />
			</mx:HBox>
			<mx:HBox width="100%">
				<mx:Label text="类型" width="25%" />
				<mx:ComboBox id="editorTypeCbo" labelField="name" dataProvider="{editorTypeCboDp}" width="50%"   />
			</mx:HBox>
			<mx:HBox width="100%">
				<mx:Label text="保存表名" width="25%" />
				<mx:TextInput id="saveTableTxt" width="50%" text="{selectedEditor.@saveTable}" />
			</mx:HBox>
			<mx:HBox width="100%">
				<mx:Label text="主键" width="25%" />
				<mx:TextInput id="pkNameTxt" width="50%" text="{selectedEditor.@pkName}" />
			</mx:HBox>
			<mx:HBox width="100%">
				<mx:Label text="主键序列" width="25%" />
				<mx:TextInput id="pkSequenceTxt" width="50%" text="{selectedEditor.@pkSequence}" />
			</mx:HBox>
		</mx:VBox>
	</mx:ViewStack>
</entitytab:AbstractTab>
