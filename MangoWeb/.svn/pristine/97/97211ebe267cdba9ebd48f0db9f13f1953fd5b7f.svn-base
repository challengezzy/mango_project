<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:mx="library://ns.adobe.com/flex/mx" fontSize="12" xmlns:ns1="smartx.flex.components.*" creationComplete="init()" xmlns:viewStackEffects="org.efflex.mx.viewStackEffects.*" xmlns:core="smartx.flex.components.core.*">
	<fx:Metadata>		       
		[Event(name='edit',type='smartx.flex.components.event.StyleTemplateEvent')]
		[Event(name='insert',type='smartx.flex.components.event.StyleTemplateEvent')]
		[Event(name='beforeSave',type='smartx.flex.components.event.StyleTemplateEvent')]
		[Event(name='save',type='smartx.flex.components.event.StyleTemplateEvent')]
		[Event(name='returnToList',type='smartx.flex.components.event.StyleTemplateEvent')]
		[Event(name='view',type='smartx.flex.components.event.StyleTemplateEvent')]
	</fx:Metadata>
	<fx:Declarations>
		<mx:HBox width="100%" id="listButtonBox" paddingLeft="5">
			<mx:PopUpMenuButton label="操作" id="popUpMenuButton" dataProvider="{menuArrayCol}" openAlways="true"/>
		</mx:HBox>
		<fx:Object id="viewButton" label="编辑" handler="{onEdit}" rightClick="true" />
		<fx:Object id="insertButton" label="新增"  handler="{onInsert}" rightClick="true" />
		<fx:Object id="deleteButton" label="删除"  handler="{deleteRow}" rightClick="true" />
		<fx:Object id="orderButton" label="订阅者"  handler="{onOrder}" rightClick="true" />
		<fx:Object id="saveButton" label="另存为" handler="{saveAs}" rightClick="true" />
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Menu;
			import mx.effects.Effect;
			import mx.effects.EffectInstance;
			import mx.events.CloseEvent;
			import mx.events.ListEvent;
			import mx.events.MenuEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.mxml.RemoteObject;
			
			import org.efflex.mx.viewStackEffects.CoverFlowPapervision3D;
			import org.efflex.mx.viewStackEffects.Papervision3DViewStackEffect;
			
			import smartx.flex.components.assets.AssetsFileLib;
			import smartx.flex.components.basic.ClientEnviorment;
			import smartx.flex.components.basic.DeskTopFrame;
			import smartx.flex.components.event.BillCardPanelEvent;
			import smartx.flex.components.event.StyleTemplateEvent;
			import smartx.flex.components.util.ConfirmUtil;
			import smartx.flex.components.util.TempletDataUtil;
			import smartx.flex.components.vo.GlobalConst;
			import smartx.flex.components.vo.TempletVO;
			
			[Bindable]
			public var templetCode:String;
			[Bindable]
			public var debugMode:Boolean = false;
			[Bindable]
			public var editable:Boolean = false;
			[Bindable]
			public var switchEffect:Effect;
			private var returnAfterSave:Boolean = false;
			[Bindable]
			public var showSystemButton:Boolean = true;
			[Bindable]
			public var destination:String = GlobalConst.SERVICE_FORM;
			[Bindable]
			public var endpoint:String;
			[Bindable]
			public var initQueryCondition:String;
			[Bindable]
			public var scenarioId:String;
			
			[Bindable]
			private var menuArrayCol:ArrayCollection = new ArrayCollection();
			
			private var templetVO:TempletVO; 
			
			private var formService:RemoteObject;
			
			private var desktop:DeskTopFrame = ClientEnviorment.getInstance().getVar(ClientEnviorment.DESKTOP_FRAME) as DeskTopFrame;
			
			private function init():void{
				if(templetCode == null)
					throw Error("元原模板编号不能为null");
				if(switchEffect == null)
					switchEffect = new CoverFlowPapervision3D();
				
				formService = new RemoteObject(destination);
				if(endpoint!=null)
					formService.endpoint = endpoint;
				formService.getTempletVO.addEventListener(ResultEvent.RESULT,getTempletVOHandler);
				formService.getTempletVO.addEventListener(FaultEvent.FAULT,faultHandler);
				formService.getTempletVO(templetCode);
				
				listPanel.bfInterceptor = "smartx.bam.bs.scenariomnager.AlertDeleteBfFromInterceptor";
				
				listPanel.isShowAlert = false;
				
				listPanel.query(false,true,true);
				
				initPopMenuButton();
				
				if(listPanel.rightClickMenu != null){
					listPanel.rightClickMenu.addEventListener(MenuEvent.ITEM_CLICK,popUpMenuButtonClickHandler,false,0,true);
					for each(var obj:* in menuArrayCol){
						if(obj.rightClick){
							//需要添加到右键菜单
							listPanel.rightClickMenuItems.push(obj);
						}
					}
				}
				
			}
			
			private function initPopMenuButton():void{
				
				menuArrayCol.removeAll();
				menuArrayCol.addItem(viewButton);
				menuArrayCol.addItem(insertButton);
				menuArrayCol.addItem(deleteButton);
				menuArrayCol.addItem({type:"separator"});
				menuArrayCol.addItem(orderButton);
				menuArrayCol.addItem({type:"separator"});
				menuArrayCol.addItem(saveButton);
				
				var menuPop:Menu = popUpMenuButton.popUp as Menu;
				menuPop.addEventListener(MenuEvent.ITEM_CLICK,popUpMenuButtonClickHandler);
			}
			
			protected function popUpMenuButtonClickHandler(event:MenuEvent):void
			{
				var item:* = event.item;
				if(item.handler != null)
					item.handler();
			}
			
			override protected function createChildren():void{
				super.createChildren();
				
				listPanel.topArea.addChild(listButtonBox);
				
			}
			
			private function getTempletVOHandler(event:ResultEvent):void{
				templetVO = event.result as TempletVO;
			}
			
			private function faultHandler(event:FaultEvent):void{   
				Alert.show(event.fault.faultString, 'Error');
			}
			
			public function onReturn():void{
				listPanel.refreshData();
				mainStack.selectedChild = listBox;
				dispatchEvent(new StyleTemplateEvent(StyleTemplateEvent.RETURN_TO_LIST));
			}
			
			public function isListPanelShowing():Boolean{
				return (mainStack.selectedChild == listBox);
			}
			
			public function onEdit():void{
				if(listPanel.getSelectedRowValue() != null){
					var row:Object = listPanel.getSelectedRowValue();
					cardPanel.editable = editable;
					cardPanel.setDataValue(row);
					mainStack.selectedChild = cardBox;
					cardPanel.insertMode = false;
					if(editable)
						dispatchEvent(new StyleTemplateEvent(StyleTemplateEvent.EDIT));
					else
						dispatchEvent(new StyleTemplateEvent(StyleTemplateEvent.VIEW));
				}
				else
					Alert.show("请选择一条记录");
			}
			
			public function onInsert():void{
				//cardPanel.editable = true;
				
				var obj:Object = new Object();
				cardPanel.setDataValue(obj);
				mainStack.selectedChild = cardBox;
				TempletDataUtil.setTempletValue("BUSINESSSCENARIOID",this.scenarioId,obj,templetVO,function():void{
					cardPanel.setDataValue(obj);
				},null,this.endpoint);
				
				TempletDataUtil.setTempletValue("STATUS","0",obj,templetVO,function():void{
					cardPanel.setDataValue(obj);
				},null,this.endpoint);
				
				cardPanel.insertMode = true;
				dispatchEvent(new StyleTemplateEvent(StyleTemplateEvent.INSERT));
				
			}
			
			public function onSave():void{
				dispatchEvent(new StyleTemplateEvent(StyleTemplateEvent.BEFORE_SAVE,cardPanel.getDataValue()));
				cardPanel.save();
				dispatchEvent(new StyleTemplateEvent(StyleTemplateEvent.SAVE));
			}
			
			public function onSaveAndReturn():void{
				onSave();
				returnAfterSave = true;
				listPanel.query(false,true,true);
			}
			private function onSaveSuccessful():void{
				if(returnAfterSave)
					onReturn();
				cardPanel.insertMode = false;
				returnAfterSave = false;
			}
			
			private function onOrder():void{
				
				var item:* = listPanel.getSelectedRowValue();
				
				if(item == null){
					Alert.show("请先选择一条数据!","提示");
				}else{
					
					var alertId:String = String(item["ID"]);
					
					var orderPanel:OrderManager = new OrderManager();
					orderPanel.templetCode ="T_BAM_SUBSCIBER";
					orderPanel.debugMode = debugMode;
					orderPanel.editable = true;
					orderPanel.endpoint = this.endpoint;
					orderPanel.alertId = alertId;
					orderPanel.initQueryCondition = " ALERTID="+alertId;
					
					PopUpManager.addPopUp(orderPanel,desktop,true);
					PopUpManager.centerPopUp(orderPanel);
					
					
				}
				
			}
			
			private function deleteRow():void{
				var item:* = listPanel.getSelectedRowValue();
				
				if(item == null){
					Alert.show("请先选择一条数据!","提示");
				}else{
					listPanel.deleteRow();
				}
			}
			
			protected function subButton_clickHandler(event:MouseEvent):void
			{
				
				var subApp:AlertParaPanel = new AlertParaPanel();
				subApp.endpoint = endpoint;
				subApp.scenarioId = scenarioId;
				subApp.bcp = cardPanel;
				subApp.choseField ="SUBJECT";
				
				PopUpManager.addPopUp(subApp,this,true);
				PopUpManager.centerPopUp(subApp);
				
			}
			
			
			protected function contentButton_clickHandler(event:MouseEvent):void
			{
				var conApp:AlertParaPanel = new AlertParaPanel();
				conApp.endpoint = endpoint;
				conApp.scenarioId = scenarioId;
				conApp.bcp = cardPanel;
				conApp.choseField ="BODY";
				
				PopUpManager.addPopUp(conApp,this,true);
				PopUpManager.centerPopUp(conApp);
			}
			
			private function saveAs():void{
				
				var item:Object = listPanel.getSelectedRowValue();
				
				if(item!=null){
					
					var atcp:AlertTypeCopyPanel = new AlertTypeCopyPanel();
					atcp.item = item;
					atcp.listPanel = listPanel;
					atcp.endpoint = endpoint;
					
					PopUpManager.addPopUp(atcp,desktop,true);
					PopUpManager.centerPopUp(atcp);
					
				}else{
					Alert.show("请先选择一条数据!","提示");
				}
				
			}
			
			
		]]>
	</fx:Script>
	<mx:ViewStack width="100%" height="100%" id="mainStack" creationPolicy="all" >
		<mx:VBox width="100%" height="100%" id="listBox" showEffect="{switchEffect}" hideEffect="{switchEffect}">
			<core:BillListPanel showLoadingWindow="false" showInitingWindow="false" destination="{destination}" 
								endpoint="{endpoint}" doubleClick="onEdit()" templetCode="{templetCode}" id="listPanel" 
								editable="false" width="100%" height="100%"  showEditBox="false" debugMode="{debugMode}" 
								initQueryCondition="{initQueryCondition}">
			</core:BillListPanel>
		</mx:VBox>
		<mx:VBox label="" width="100%" height="100%" id="cardBox" showEffect="{switchEffect}" hideEffect="{switchEffect}">
			<mx:HBox width="100%" id="cardButtonBox">
				<mx:Button id="returnButton" label="返回" toolTip="返回列表" click="onReturn()" icon="{AssetsFileLib.returnIcon}" />
				<mx:Button id="saveAndReturnButton" label="保存并返回" toolTip="保存当前信息并返回列表" 
						   click="onSaveAndReturn()" icon="{AssetsFileLib.savereturnIcon}" />
				<mx:Button id="cardSaveButton" label="保存" toolTip="保存当前信息" 
						   click="onSave()" icon="{AssetsFileLib.saveIcon}" />
				<mx:Button id="subButton" label="主题参数" toolTip="选择参数添加在主题中" 
						   click="subButton_clickHandler(event)" icon="{AssetsFileLib.setIcon}" />
				<mx:Button id="contentButton" label="内容参数" toolTip="选择参数添加在内容中" 
						   click="contentButton_clickHandler(event)" icon="{AssetsFileLib.setIcon}" />
			</mx:HBox>
			<core:BillCardPanel destination="{destination}" endpoint="{endpoint}" templetCode="{templetCode}" 
								id="cardPanel" width="100%" height="100%" title="详细信息" debugMode="{debugMode}" 
								saveSuccessful="onSaveSuccessful()" showInitingWindow="false">
			</core:BillCardPanel>
		</mx:VBox>
	</mx:ViewStack>	
</mx:Canvas>
