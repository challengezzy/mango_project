<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 width="100%" height="100%"
		 xmlns:utils="smartx.bam.flex.modules.entitymodel.utils.*" 
		 xmlns:containers="net.brandonmeyer.containers.*" xmlns:olap="smartx.flex.components.core.olap.*" 
		 creationComplete="init()" xmlns:viewStackEffects="org.efflex.mx.viewStackEffects.*" xmlns:styletemplate="smartx.flex.components.styletemplate.*">
	<fx:Declarations>
		<mx:TitleWindow id="listWindow" width="1000" height="550" showCloseButton="true" close="PopUpManager.removePopUp(listWindow)" >
			<mx:VBox id="detailListBox" width="100%" height="100%" paddingBottom="5" paddingTop="5" paddingLeft="5" paddingRight="5">
				<!--<utils:EntityModelListPanel width="100%" height="100%" id="listPanel" pageSize="15" attributesXml="{attributesXml}" sharedObjectCode="{sharedObjectCode}" 
											isQueryAfterCompleted="false" isVisibleFilter="true" sql="{sql}" dataSource="{datasource}"
											sharedObjectSpaceName="{sharedObjectSpaceName}" debugMode="{debugMode}"/>-->
			</mx:VBox>
		</mx:TitleWindow>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.mxml.RemoteObject;
			
			import smartx.bam.flex.modules.entitymodel.utils.EntityModelListPanel;
			import smartx.bam.flex.modules.entitymodel.utils.EntityUtil;
			import smartx.bam.flex.vo.BAMConst;
			import smartx.flex.components.assets.AssetsFileLib;
			import smartx.flex.components.basic.ClientEnviorment;
			import smartx.flex.components.util.MetadataTempletUtil;
			import smartx.flex.components.util.SmartXMessage;
			import smartx.flex.components.vo.MetadataTemplet;
			
			[Bindalbe]
			public var modelXml:XML;
			
			[Bindable]
			public var modelCode:String;
			
			[Bindable]
			public var relationsXml:XML;
			
			[Bindable]
			private var attributesXml:XML;
			
			[Bindable]
			private var sharedObjectCode:String;
			[Bindable]
			private var sharedObjectSpaceName:String = BAMConst.KEYNAME_SHAREDOBJECT_ENTITY_MODEL_FILTERINFO;
			[Bindable]
			public var datasource:String;
			[Bindable]
			private var debugMode:Boolean = ClientEnviorment.getInstance().getVar(ClientEnviorment.KEY_GLOBAL_DEBUGMODE);
			[Bindable]
			private var endpoint:String = ClientEnviorment.getInstance().getVar(ClientEnviorment.KEY_SERVICE_ENDPOINT) as String;;
			
			private var bamService:RemoteObject;
			
			private function init():void{
				
				bamService = new RemoteObject(BAMConst.BAM_Service);
				bamService.endpoint = endpoint;
				
				bamService.generateDisplayEntitySqlContainCondition.addEventListener(ResultEvent.RESULT,generateEntitySqlHandler);
				bamService.generateDisplayEntitySqlContainCondition.addEventListener(FaultEvent.FAULT,function(event:FaultEvent):void{
					SmartXMessage.show("生成SQL错误!",SmartXMessage.MESSAGE_ERROR,event.fault.faultString);
				});
				
			}
			
			private function generateEntitySqlHandler(event:ResultEvent):void{
				
				var sql:String = event.result as String;
				
				var list:EntityModelListPanel = new EntityModelListPanel();
				list.attributesXml = attributesXml;
				list.sql = sql;
				list.sharedObjectCode = sharedObjectCode;
				list.isQueryAfterCompleted = true;
				list.isVisibleFilter = true;
				list.dataSource = datasource;
				list.sharedObjectSpaceName = sharedObjectSpaceName;
				list.debugMode = debugMode;
				
				PopUpManager.addPopUp(listWindow,this.root,true);
				PopUpManager.centerPopUp(listWindow);
				
				if(detailListBox.getChildren().length>0){
					detailListBox.removeAllChildren();
				}
				detailListBox.addChild(list);
			}

			
			protected function viewBtn_clickHandler():void
			{
				var item:Object = relationList.selectedItem;
				if(item != null){
					var relationXml:XML = item as XML;
					var toEntityCode:String = String(relationXml.@toEntityCode);
					var toEntityIdAttributeName:String = String(relationXml.@toEntityIdAttributeName);
					var fetchSQL:String = String(relationXml.fetchSQL);
					
					var toEntityMtCode:String = BAMConst.ENTITY_MT_PREFIX+modelCode+"_"+toEntityCode;
					var entityTemplete:MetadataTemplet = MetadataTempletUtil.getInstance().findMetadataTemplet(toEntityMtCode);
					if(entityTemplete!=null){
						var tempEnityXml:XML = entityTemplete.contentXML;
						sharedObjectCode = String(modelXml.entityModelCode)+"_"+String(tempEnityXml.@code);
						var displayAtts:XML = EntityUtil.displayAttributeWrap(tempEnityXml,modelXml);
						attributesXml = String(tempEnityXml.@type) == "virtual"?tempEnityXml.attributes[0]:displayAtts;
						var condition:String = " where "+toEntityIdAttributeName+" in (select toid from ("+fetchSQL+"))";
						bamService.generateDisplayEntitySqlContainCondition(tempEnityXml.toXMLString(),this.modelXml.toXMLString(),null,condition);
					}
				}else{
					SmartXMessage.show("需要选中一条关系!");
				}
			}
			
		]]>
	</fx:Script>
		
		<mx:VBox id="relationBox" width="100%" height="100%">
			<mx:HRule width="100%" />
			<mx:HBox width="100%" horizontalAlign="left" >
				<mx:Button label="查看" icon="{AssetsFileLib.viewIcon}" toolTip="查看" click="viewBtn_clickHandler()"/>
				<mx:Label width="100%" fontWeight="bold" text="关系列表" textAlign="center" />
			</mx:HBox>
			<mx:DataGrid id="relationList" dataProvider="{relationsXml.relation}" doubleClickEnabled="true" doubleClick="viewBtn_clickHandler()" width="100%" height="100%" >
				<mx:columns>
					<mx:DataGridColumn dataField="@name" headerText="关系名称" />
				</mx:columns>
			</mx:DataGrid>
		</mx:VBox>
</mx:VBox>
