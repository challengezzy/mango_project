<?xml version="1.0" encoding="utf-8"?>
<entitytab:AbstractTab xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:entitytab="smartx.bam.flex.modules.entitymodel.entitytab.*" 
					   width="100%" height="100%" creationComplete="creationCompleteHandler()" label="过滤规则" paddingBottom="5"
					   paddingLeft="5" paddingRight="5" paddingTop="5">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.adobe.utils.StringUtil;
			
			import mx.collections.ArrayCollection;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.mxml.RemoteObject;
			
			import smartx.flex.collections.HashMap;
			
			import smartx.bam.flex.modules.entitymodel.QueryDatagridWindow;
			import smartx.bam.flex.modules.entitymodel.utils.EntityTaskWindow;
			import smartx.bam.flex.modules.entitymodel.utils.EntityUtil;
			import smartx.bam.flex.vo.BAMConst;
			import smartx.flex.components.assets.AssetsFileLib;
			import smartx.flex.components.basic.ClientEnviorment;
			import smartx.flex.components.util.OperatingTipUtil;
			import smartx.flex.components.util.SmartXMessage;
			import smartx.flex.components.vo.GlobalConst;
			
			private var columnsCol:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var attributesCol:ArrayCollection = new ArrayCollection();
			
			public var allInheritRelation:ArrayCollection;
			
			private var bamRpc:RemoteObject;
			
			private var formRpc:RemoteObject;
			[Bindable]
			public var refreshTree:Function;
			
			public var deleteXmlNode:Function;
			
			public var selectItemByCode:Function;
			
			public var entitiesCache:HashMap;
			[Bindable]
			public var allEntitiesCol:ArrayCollection;
			
			public var allInheritAtt:ArrayCollection;
			
			public var rulesArr:ArrayCollection;
			
			private var queryDatagridWindow:QueryDatagridWindow = new QueryDatagridWindow();
			
			private function creationCompleteHandler():void{
				formRpc = new RemoteObject(GlobalConst.SERVICE_FORM);
				formRpc.endpoint = endpoint;
				
				bamRpc = new RemoteObject(BAMConst.BAM_Service);
				bamRpc.endpoint = endpoint;
				
				bamRpc.dealRealTimeStatistics.addEventListener(ResultEvent.RESULT,dealRealTimeStatisticsHandler);
				bamRpc.dealRealTimeStatistics.addEventListener(FaultEvent.FAULT,function(event:FaultEvent):void{
					SmartXMessage.show("生成统计结果时出错!",SmartXMessage.MESSAGE_ERROR,event.fault.faultString);
				});
				
				bamRpc.generateEntitySql.addEventListener(ResultEvent.RESULT,generateEntitySqlHandler);
				bamRpc.generateEntitySql.addEventListener(FaultEvent.FAULT,function(event:FaultEvent):void{
					SmartXMessage.show("生成SQL错误!",SmartXMessage.MESSAGE_ERROR,event.fault.faultString);
				});
				
				initRuleData();
				isCreationComplete = true;
			}
			
			protected function groupColumnCbo_changeHandler(event:ListEvent):void{
				var item:Object = groupColumnCbo.selectedItem;
				if(item != null ){
					var name:String = item["name"] as String;
					var rule:XML = selectedItem.content as XML;
					rule.@groupcolumn = name;
				}
			}
			
			private function ruleNameTxt_changeHandler(event:Event):void{
				if(StringUtil.trim(ruleNameTxt.text) != "")
					selectedItem.content.@name = ruleNameTxt.text;
			}
			
			private function ruleCodeTxt_changeHandler(event:Event):void{
				if(StringUtil.trim(ruleCodeTxt.text) != "")
					selectedItem.content.@code = ruleCodeTxt.text;
			}
			
			private function ownerRuleEntityCob_changeHandler(event:ListEvent):void{
				var tempEntity:XML = ownerRuleEntityCob.selectedItem as XML;
				var currentRuleXml:XML = selectedItem.content as XML;
				var newRuleNodeXml:XML = currentRuleXml.copy();
				
				deleteXmlNode(currentRuleXml);
				if(tempEntity.rules.length() <= 0 )
					tempEntity.appendChild(new XML("<rules />"));
				
				tempEntity.rules.appendChild(newRuleNodeXml);
				
				refreshTree();
				selectItemByCode(String(newRuleNodeXml.@code),rulesArr);
			}
			
			public function removeFilterItem(dis:DisplayObject):void{
				itemsVbox.removeChild(dis);
			}
			
			private function addFilterItem():void{
				
				var tempColumn:String ="";
				if(columnsCol.length > 0){
					var obj:Object = columnsCol.getItemAt(0);
					tempColumn = obj["columnName"] as String;
				}
				
				var itemXml:XML = <item enabled="true" type="equalValue" column="" logicalOperator="AND" relationalOperator="=" value="" />;
				itemXml.@column = tempColumn;
				
				var rule:XML = selectedItem.content as XML;
				rule.appendChild(itemXml);
				
				var efip:EntityFilterItemPanel = new EntityFilterItemPanel();
				efip.itemXml = itemXml;
				efip.allFieldsCol = columnsCol;
				efip.itemsVBox = itemsVbox;
//				efip.formService = formRpc;
				efip.entitiesXml = contentXml;
				itemsVbox.addChild(efip);
			}
			
			/**
			 * 实时查询
			 **/ 
			private function onQueryWithRule():void{
				var ruleXml:XML = new XML(selectedItem.content);
				var ownerRuleEntityCode:String = selectedItem["entityCode"] as String;
				var entityXml:XML = entitiesCache.getValue(ownerRuleEntityCode);
				if(entityXml == null){
					SmartXMessage.show("实体不存在，无法查询!");
					return;
				}
				if(ruleXml != null)
					bamRpc.generateEntitySql(entityXml.toXMLString(),contentXml.toXMLString(),ruleXml.toXMLString());
				else
					SmartXMessage.show("请选择一条规则!");
			}
			
			/**
			 * 生成统计分析结果
			 **/ 
			private function onStatistics():void{
				if(!insertMode){
					var ruleXml:XML = new XML(selectedItem.content);
					var ownerRuleEntityCode:String = selectedItem["entityCode"] as String;
					var entityXml:XML = entitiesCache.getValue(ownerRuleEntityCode);
					if(entityXml == null){
						SmartXMessage.show("实体不存在，无法生成统计分析结果!");
						return;
					}
					if(ruleXml != null ){
						var ruleCode:String = ruleXml.@code;
						OperatingTipUtil.startOperat("正在生成统计结果....",this);
						bamRpc.dealRealTimeStatistics(contentXml.toXMLString(),String(contentXml.entityModelCode),ownerRuleEntityCode,ruleCode);
					}else
						SmartXMessage.show("请先选一条规则",SmartXMessage.MESSAGE_WARN);
				}else
					SmartXMessage.show("尚未保存此模型,不能进行此项操作!",SmartXMessage.MESSAGE_WARN);
			}
			
			private function dealRealTimeStatisticsHandler(event:ResultEvent):void{
				OperatingTipUtil.endOperat();
				SmartXMessage.show("统计结果已生成!");
			}
			
			/**
			 * 定时任务管理
			 **/ 
			private function onCreateTask():void{
				if(!insertMode){
					var ruleXml:XML = new XML(selectedItem.content);
					var ownerRuleEntityCode:String = selectedItem["entityCode"] as String;
					var entityXml:XML = entitiesCache.getValue(ownerRuleEntityCode);
					if(entityXml == null){
						SmartXMessage.show("实体不存在，无法进入定时任务管理!");
						return;
					}
					
					if(ruleXml != null ){
						var ruleCode:String = ruleXml.@code;
						var ruleName:String = ruleXml.@name;
						var taskCode:String = ruleXml.@taskCode;
						
						var dataTaskWindow:EntityTaskWindow = new EntityTaskWindow();
						dataTaskWindow.entityModelCode = contentXml.entityModelCode;
						dataTaskWindow.entityCode = ownerRuleEntityCode;
						dataTaskWindow.loginName = String(ClientEnviorment.getInstance().getVar(ClientEnviorment.KEY_LOGIN_USER_LOGINNAME));;
						dataTaskWindow.endpoint = endpoint;
						dataTaskWindow.code = ruleCode;
						dataTaskWindow.taskCode = taskCode;
						dataTaskWindow.content = ruleXml;
						dataTaskWindow.dataTaskDesc = ruleName;
						dataTaskWindow.codeDesc = "ruleCode";
						dataTaskWindow.taskSQL = "SELECT DT.ID,DT.CODE,DT.NAME,DT.MTCODE,MT.CONTENT,DT.CRONEXPRESSION " +
							"FROM PUB_DATATASK_TEMPLET DT,PUB_METADATA_TEMPLET MT WHERE DT.MTCODE = MT.CODE AND DT.CODE LIKE 'ENTITY_RULE%'";
						dataTaskWindow.entityTaskType = BAMConst.ENTITY_DATATASK_RULE;;
						
						if(desktop != null)
							PopUpManager.addPopUp(dataTaskWindow,desktop,true);
						else
							PopUpManager.addPopUp(dataTaskWindow,this,true);
						
						PopUpManager.centerPopUp(dataTaskWindow);
					}else
						SmartXMessage.show("请先选一条规则",SmartXMessage.MESSAGE_WARN);
				}else
					SmartXMessage.show("模型尚未保存,不能发布任务",SmartXMessage.MESSAGE_WARN);
			}
			
			private function initRuleData():void{
				var ownerRuleEntityCode:String = selectedItem["entityCode"] as String;
				var ownerObj:Object = entitiesCache.getValue(ownerRuleEntityCode);
				ownerRuleEntityCob.selectedItem = ownerObj;
				
				columnsCol.removeAll();
				var currEntityXml:XML = ownerObj as XML;
				for each( var attributeItem:XML in currEntityXml.attributes.attribute){
					var name:String = String(attributeItem.@name);
					var type:String = String(attributeItem.@type);
					var label:String = String(attributeItem.@label);
					var refDesc:String = String(attributeItem.@dictionaryRef);
					var columnItem:Object;
					if(String(currEntityXml.@type) == "virtual"){//如果是虚拟实体
						columnItem = new Object();
						columnItem["columnName"] = String(attributeItem.@expression);
						columnItem["columnAlias"] = name;
						columnItem["columnType"] = type;
						columnItem["columnLabel"] = label;
						columnItem["columnRef"] = refDesc;
						columnsCol.addItem(columnItem);
					}else{
						var mappingItems:XMLList = currEntityXml.mappingInfo.attributeMapping.map.(@attributeName == attributeItem.@name);
						if(mappingItems.length() > 0){
							columnItem = new Object();
							columnItem["columnName"] = String(mappingItems[0].@columnName);
							columnItem["columnAlias"] = name;
							columnItem["columnType"] = type;
							columnItem["columnLabel"] = label;
							columnItem["columnRef"] = refDesc;
							columnsCol.addItem(columnItem);
						}
					}
				}
				
				for each(var parentAttXml:XML in allInheritAtt){
					var parentAttName:String = String(parentAttXml.@name);
					var parentAttType:String = String(parentAttXml.@type);
					var parentAttLabel:String = String(parentAttXml.@label);
					var parentAttRefDesc:String = String(parentAttXml.@dictionaryRef);
					var parenColumnItem:Object = new Object();
					parenColumnItem["columnName"] = parentAttName;
					parenColumnItem["columnAlias"] = parentAttName;
					parenColumnItem["columnType"] = parentAttType;
					parenColumnItem["columnLabel"] = parentAttLabel;
					parenColumnItem["columnRef"] = parentAttRefDesc;
					columnsCol.addItem(parenColumnItem);
				}
				
				for each(var relationXml:XML in currEntityXml.relations.relation){
					var relationName:String = String(relationXml.@name);
					var relationCode:String = String(relationXml.@code);
					var toEntityCode:String = String(relationXml.@toEntityCode);
					var entityObj:Object = null;
					if(entitiesCache != null ){
						entityObj = entitiesCache.getValue(toEntityCode);
					}
					
					var relationItem:Object = new Object();
					relationItem["columnName"] = relationCode;
					relationItem["columnAlias"] = relationCode;
					relationItem["columnType"] = "relationItem";
					relationItem["columnLabel"] = relationName;
					relationItem["columnRef"] = "";
					relationItem["toEntity"] = entityObj;
					columnsCol.addItem(relationItem);
				}
				
				for each(var parentRelation:XML in allInheritRelation){
					
					var parentRelationName:String = String(parentRelation.@name);
					var parentRelationCode:String = String(parentRelation.@code);
					var parentToEntityCode:String = String(parentRelation.@toEntityCode);
					var tempEntityObj:Object = null;
					if(entitiesCache != null ){
						tempEntityObj = entitiesCache.getValue(parentToEntityCode);
					}
					
					var parentRelationItem:Object = new Object();
					parentRelationItem["columnName"] = parentRelationCode;
					parentRelationItem["columnAlias"] = parentRelationCode;
					parentRelationItem["columnType"] = "relationItem";
					parentRelationItem["columnLabel"] = parentRelationName;
					parentRelationItem["columnRef"] = "";
					parentRelationItem["toEntity"] = tempEntityObj;
					columnsCol.addItem(parentRelationItem);
				}
				
				attributesCol.removeAll();
				var emptyObj:Object = new Object();
				emptyObj["name"] = "";
				attributesCol.addItem(emptyObj);
				for each(var attXml:XML in currEntityXml.attributes.attribute){
					var item:Object = new Object();
					var attName:String = attXml.@name;
					item["name"] = attName;
					attributesCol.addItem(item);
				}
				
				var rule:XML = selectedItem.content as XML;
				itemsVbox.removeAllChildren();
				for each( var ruleItem:XML in rule.item){
					var efip:EntityFilterItemPanel = new EntityFilterItemPanel();
					efip.itemXml = ruleItem;
					efip.allFieldsCol = columnsCol;
					efip.itemsVBox = itemsVbox;
//					efip.formService = formRpc;
					efip.entitiesXml = contentXml;
					itemsVbox.addChild(efip);
				}
				
				var tempGroupColumn:String = String(rule.@groupcolumn);
				for each(var itemColumn:Object in attributesCol){
					var itemName:String = itemColumn["name"] as String;
					if(itemName != null && tempGroupColumn != null && itemName.toLowerCase() == tempGroupColumn.toLowerCase()){
						groupColumnCbo.selectedItem = itemColumn;
					}
				}
			}
			
			private function generateEntitySqlHandler(event:ResultEvent):void{
				var sql:String = event.result as String;
				if(sql !=null && sql != ""){
					var ruleXml:XML = new XML(selectedItem.content);
					var entityCode:String = selectedItem["entityCode"] as String;
					var entityXml:XML = entitiesCache.getValue(entityCode);
					var sharedObjectCode:String = contentXml.entityModelCode+"_"+entityCode;
					//如果是虚拟实体，则取当前虚拟实体的所有属性作显示，如果不是则取实体的显示属性作显示
					queryDatagridWindow.attributesXml = entityXml.@type=="virtual"?entityXml.attributes[0]
						:EntityUtil.displayAttributeWrap(entityXml,contentXml);
					queryDatagridWindow.sharedObjectCode = sharedObjectCode;
					queryDatagridWindow.sharedObjectSpaceName = BAMConst.KEYNAME_SHAREDOBJECT_ENTITY_MODEL_FILTERINFO;
					queryDatagridWindow.sql = sql;
					queryDatagridWindow.dataSource = contentXml.datasource;
					queryDatagridWindow.debugMode = debugMode;
					
					desktop != null?PopUpManager.addPopUp(queryDatagridWindow,desktop,true)
									:PopUpManager.addPopUp(queryDatagridWindow,this,true);
					
					PopUpManager.centerPopUp(queryDatagridWindow);
					
					queryDatagridWindow.refresh();
				}
			}
			
			public function showHandler():void{
				initRuleData();
			}
		]]>
	</fx:Script>
	<mx:HBox width="100%">
		<mx:Label width="25%" text="名称"/>
		<mx:TextInput id="ruleNameTxt" width="50%"
					  change="ruleNameTxt_changeHandler(event)"
					  focusOut="refreshTree()"
					  text="{selectedItem.content.@name}"/>
	</mx:HBox>
	<mx:HBox width="100%">
		<mx:Label width="25%" text="编码"/>
		<mx:TextInput id="ruleCodeTxt" width="50%"
					  change="ruleCodeTxt_changeHandler(event)" editable="false"
					  text="{selectedItem.content.@code}"/>
	</mx:HBox>
	<mx:HBox width="100%" horizontalAlign="left">
		<mx:Label width="25%" text="分区字段"/>
		<mx:ComboBox id="groupColumnCbo" width="50%"
					 change="groupColumnCbo_changeHandler(event)"
					 dataProvider="{attributesCol}" labelField="name"/>
	</mx:HBox>
	<mx:HBox width="100%">
		<mx:Label width="25%" text="所属实体"/>
		<mx:ComboBox id="ownerRuleEntityCob" width="50%"
					 change="ownerRuleEntityCob_changeHandler(event)"
					 dataProvider="{allEntitiesCol}" labelField="@name"/>
	</mx:HBox>
	<mx:HBox width="100%" horizontalAlign="left">
		<mx:LinkButton width="20" height="20" click="addFilterItem()"
					   icon="{AssetsFileLib.addIcon}" toolTip="增加规则项"/>
	</mx:HBox>
	<mx:HRule width="100%"/>
	<mx:VBox id="itemsVbox" width="100%" height="100%"/>
	<mx:HRule width="100%"/>
	<mx:HBox width="100%" horizontalAlign="center" verticalAlign="bottom">
		<mx:Button label="实时查询" click="onQueryWithRule()"/>
		<mx:Button label="生成统计分析结果" click="onStatistics()"/>
		<mx:Button label="定时任务管理" click="onCreateTask()"/>
	</mx:HBox>
</entitytab:AbstractTab>
