<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%"
		   creationComplete="init()">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[			
			import mx.controls.Button;
			
			import smartx.flex.components.core.ext.DataValidator;
			import smartx.flex.components.event.StyleTemplateEvent;
			import smartx.flex.components.styletemplate.ext.DebugUtil;
			import smartx.flex.components.styletemplate.ifc.CardButtonListener;
			import smartx.flex.components.styletemplate.ifc.ListButtonListener;
			import smartx.flex.components.styletemplate.ifc.StyleTemplateListener;
			import smartx.flex.components.util.Hashtable;
			import smartx.flex.components.util.IconUtility;
			import smartx.flex.components.vo.MetadataTemplet;
			
			public var metadataTemplet:MetadataTemplet;
			public var endpoint:String;
			private var listenerMap:Hashtable = new Hashtable();
			private var iconComponentArray:Array = [];
			
			private function init():void{
				if(metadataTemplet == null)
					throw new Error("元数据模板不能为空");
				var xml:XML = metadataTemplet.contentXML;
				var styletemplate:StyleTemplate11 = new StyleTemplate11();
				if(xml.templetCode.length() == 0)
					throw new Error("templetCode不能为空");
				styletemplate.templetCode = xml.templetCode;
				styletemplate.isShowAlert = true;
				if(xml.isShowAlert.length() > 0)
					styletemplate.isShowAlert = false;				
				if(xml.isCommitButton.length() > 0)
					styletemplate.isCommitButton = xml.isCommitButton;
				if(endpoint != null)
					styletemplate.endpoint = endpoint;
				styletemplate.percentWidth = 100;
				if(xml.percentWidth.length() > 0)
					styletemplate.percentWidth = xml.percentWidth;
				styletemplate.percentHeight = 100;
				if(xml.percentHeight.length() > 0)
					styletemplate.percentHeight = xml.percentHeight;
				if(xml.endpoint.length() > 0)
					styletemplate.endpoint = xml.endpoint;
				if(xml.debugMode.length() > 0)
					styletemplate.debugMode = xml.debugMode=="true"?true:false;
				if(xml.width.length() > 0)
					styletemplate.width = xml.width;
				if(xml.height.length() > 0)
					styletemplate.height = xml.height;
				
				this.addChild(styletemplate);
				
				if(styletemplate.debugMode){
					//如果调试模式，添加一个编辑元数据模板的按钮
					DebugUtil.generateDebugButton(this,metadataTemplet.id);
					
				}
				
				callLater(function():void{
					//自定义卡片按钮
					for each(var cardButtonXML:XML in xml.customCardButton.button){
						var cardButton:Button = new Button();
						cardButton.id = cardButtonXML.@id;
						cardButton.label = cardButtonXML.@label;
						cardButton.toolTip = cardButtonXML.@toolTip;
						var cardIconUrl:String = cardButtonXML.@icon;
						if(cardIconUrl != null && cardIconUrl != ""){
							var cardIcon:Class = IconUtility.getClass(cardButton,cardIconUrl,16,16);
							cardButton.setStyle("icon",cardIcon);
							iconComponentArray.push(cardButton);
						}
						var cardListeners:Array = [];
						for each(var cardListener:XML in cardButtonXML.listeners.listener){
							var cardClassReference:Class = getDefinitionByName(cardListener) as Class;
							var cardListenerClass:CardButtonListener = new cardClassReference() as CardButtonListener;
							cardListeners.push(cardListenerClass);
						}
						listenerMap.add(cardButton.id,cardListeners);
						cardButton.addEventListener(MouseEvent.CLICK,function(event:MouseEvent):void{
							var array:Array = listenerMap.find(event.target.id) as Array;
							if(array != null){
								for each(var temp:CardButtonListener in array){
									temp.buttonClick(styletemplate.cardPanel);
								}
							}	
						},false,0,true);
						styletemplate.cardButtonBox.addChild(cardButton);
					}
					
					for each(var dataValidatorXML:XML in xml.cardDataValidators.dataValidator){
						var classname:String = dataValidatorXML.@classname;
						var validatorclassReference:Class = getDefinitionByName(classname) as Class;
						var dataValidator:DataValidator = new validatorclassReference() as DataValidator;
						if(dataValidator != null)
							styletemplate.cardPanel.addDataValidator(dataValidator);
					}
					listenerMap.clear();
					for each(var styleTemplateEventXML:XML in xml.styleTemplateEvents.styleTemplateEvent){
							var type:String = styleTemplateEventXML.@type;
							var styleTemplateListeners:Array = [];
							for each(var styleTemplateListener:XML in styleTemplateEventXML.listeners.listener){
								var styleTemplateClassReference:Class = getDefinitionByName(styleTemplateListener) as Class;
								var styleTemplateListenerClass:StyleTemplateListener = new styleTemplateClassReference() as StyleTemplateListener;
								styleTemplateListeners.push(styleTemplateListenerClass);
							}
							listenerMap.add(type,styleTemplateListeners);
							styletemplate.addEventListener(type,function(event:StyleTemplateEvent):void{
								var arr:Array = listenerMap.find(event.type) as Array;
								if(arr){
									for each(var temp:StyleTemplateListener in arr){
										temp.processEvent(styletemplate.cardPanel);
									}
								}
							});
					}
				});
			}
			
			public function destroy():void{
				for each (var obj:* in iconComponentArray){
					IconUtility.destroy(obj);
				}
				iconComponentArray = null;
				removeAllChildren();
			}
		]]>
	</fx:Script>
</mx:Canvas>
