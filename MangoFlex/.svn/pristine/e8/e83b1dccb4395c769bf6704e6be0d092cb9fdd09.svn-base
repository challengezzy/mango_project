<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%"
		   creationComplete="init()">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import smartx.flex.components.styletemplate.ext.DebugUtil;
			import smartx.flex.components.util.Hashtable;
			import smartx.flex.components.util.IconUtility;
			import smartx.flex.components.vo.MetadataTemplet;
			
			public var metadataTemplet:MetadataTemplet;
			public var endpoint:String;
			private var listenerMap:Hashtable = new Hashtable();
			private var iconComponentArray:Array = [];
			
			private var btnArr:Array = new Array();
			
			private function init():void{
				if(metadataTemplet == null)
					throw new Error("元数据模板不能为空");
				var xml:XML = metadataTemplet.contentXML;
				var styletemplate:StyleTemplate04 = new StyleTemplate04();
				if(xml.templetCode.length() == 0)
					throw new Error("templetCode不能为空");
				styletemplate.templetCode = xml.templetCode;
				styletemplate.editable = false;
				if(endpoint != null)
					styletemplate.endpoint = endpoint;
				if(xml.editable.length() > 0)
					styletemplate.editable = xml.editable=="true"?true:false;
				styletemplate.percentWidth = 100;
				if(xml.percentWidth.length() > 0 && String(xml.percentWidth) != "" )
					styletemplate.percentWidth = xml.percentWidth;
				styletemplate.percentHeight = 100;
				if(xml.percentHeight.length() > 0 && String(xml.percentHeight) != "" )
					styletemplate.percentHeight = xml.percentHeight;
				if(xml.endpoint.length() > 0)
					styletemplate.endpoint = xml.endpoint;
				if(xml.debugMode.length() > 0)
					styletemplate.debugMode = xml.debugMode=="true"?true:false;
				if(xml.width.length() > 0 && String(xml.width) != "" )
					styletemplate.width = xml.width;
				if(xml.height.length() > 0 && String(xml.height) != "" )
					styletemplate.height = xml.height;
				
				if(xml.isShowAlert.length() > 0)
					styletemplate.isShowAlert = xml.isShowAlert =="false"?false:true;
				
				if(xml.firstAutoQuery.length() > 0)
					styletemplate.showDataAfterInit = xml.firstAutoQuery =="true"?true:false;
				
				if(xml.allowMultipleSelection.length() > 0)
					styletemplate.allowMultipleSelection = xml.allowMultipleSelection =="true"?true:false;
				
				if(xml.initQueryCondition.length() > 0 && String(xml.initQueryCondition) != "")
					styletemplate.initQueryCondition = xml.initQueryCondition;
				
				if(xml.showOperationButtonType.length() > 0 && String(xml.showOperationButtonType) != "")
					styletemplate.showOperationButtonType = xml.showOperationButtonType;
				
				if(xml.showDeleteButton.length() > 0 && String(xml.showDeleteButton) != "")
					styletemplate.showDeleteButton = String(xml.showDeleteButton)=='true'?true:false;
				
				if(xml.pageSize.length() > 0 && String(xml.pageSize) != ""){
					styletemplate.pageSize = parseInt(String(xml.pageSize));
				}else{
					styletemplate.pageSize = 5;
				}
					
				
				if(xml.titleField.length() > 0 && String(xml.titleField) != "")
					styletemplate.titleField = xml.titleField;
				
				if(xml.subTitleField.length() > 0 && String(xml.subTitleField) != "")
					styletemplate.subTitleField = xml.subTitleField;
				
				if(xml.contentField.length() > 0 && String(xml.contentField) != "")
					styletemplate.contentField = xml.contentField;
				
				if(xml.iconField.length() > 0 && String(xml.iconField) != "")
					styletemplate.iconField = xml.iconField;
				
				if(xml.imgUrl.length() > 0 && String(xml.imgUrl) != "")
					styletemplate.imgUrl = xml.imgUrl;
				
				if(xml.interceptors.length()>0){
					if(xml.interceptors.bfIncList.length() > 0)
						styletemplate.bfIncList = xml.interceptors.bfIncList;
					if(xml.interceptors.afIncList.length() > 0)
						styletemplate.afIncList = xml.interceptors.afIncList;
					if(xml.interceptors.clientBfIncList.length() > 0)
						styletemplate.clientBfIncList = xml.interceptors.clientBfIncList;
					if(xml.interceptors.clientAfIncList.length() > 0)
						styletemplate.clientAfIncList = xml.interceptors.clientAfIncList;
				}
				
				for each(var buttonXML:XML in xml.customListButton.button){
					
					var btnInfo:Object = new Object();
					btnInfo["id"] = String(buttonXML.@id);
					btnInfo["label"] = String(buttonXML.@label);
					btnInfo["toolTip"] = String(buttonXML.@toolTip);
					btnInfo["listener"] = String(buttonXML.@listener);
					btnInfo["icon"] = String(buttonXML.@icon);
//					if(iconUrl != null && iconUrl != ""){
//						var icon:Class = IconUtility.getClass(btnInfo,iconUrl,16,16);
//						btn.setStyle("icon",icon);
//					}
					
//					var listeners:Array = [];
//					for each(var listener:XML in buttonXML.listeners.listener){
//						var classReference:Class = getDefinitionByName(listener) as Class;
//						var listenerClass:ListItemButtonListenerIFC = new classReference() as ListItemButtonListenerIFC;
//						listeners.push(listenerClass);
//					}
//					
//					listenerMap.add(btn.id,listeners);
//					
//					btn.addEventListener(MouseEvent.CLICK,function(event:MouseEvent):void{
//						var array:Array = listenerMap.find(event.target.id) as Array;
//						if(array != null){
//							for each(var temp:ListItemButtonListenerIFC in array){
//								temp.handler(btn.data);
//							}
//						}	
//					});
					
					btnArr.push(btnInfo);
				}
				
				styletemplate.buttonCol = btnArr;
				
				
				this.addChild(styletemplate);
				
				if(styletemplate.debugMode){
					//如果调试模式，添加一个编辑元数据模板的按钮
					DebugUtil.generateDebugButton(this,metadataTemplet.id);
					
				}
				
			}
			
			public function destroy():void{
				for each (var obj:* in iconComponentArray){
					IconUtility.destroy(obj);
				}
				iconComponentArray = null;
				removeAllChildren();
			}
		]]>
	</fx:Script>
</mx:Canvas>