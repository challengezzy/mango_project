<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:mx="library://ns.adobe.com/flex/mx" 
					  xmlns:mtchart="smartx.flex.components.core.mtchart.*"
					  xmlns:flexlib="flexlib.controls.*"
					  creationComplete="init()"
					  width="100%" height="100%" xmlns:treeGridClasses="flexlib.controls.treeGridClasses.*">
	<fx:Script>
		<![CDATA[
			import flexlib.controls.TreeGrid;
			import flexlib.controls.treeGridClasses.TreeGridColumn;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.controls.Alert;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.DataGridEvent;
			import mx.events.TreeEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.mxml.RemoteObject;
			import mx.utils.ObjectUtil;
			
			import smartx.flex.components.event.BasicEvent;
			import smartx.flex.components.util.CompareUtil;
			import smartx.flex.components.util.SmartXMessage;
			import smartx.flex.components.vo.GlobalConst;
			import smartx.flex.components.vo.TableDataStruct;
			
			[Bindable]
			private var dataTree:ArrayCollection = new ArrayCollection();//树的dataprovider
			private var indexMap:Object;//树的hash索引
			
			public var parentFieldName:String;
			public var pkFieldName:String;
			
			[Bindable]
			public var columnsArray:Array;
			
			[Bindable]
			public var dataProvider:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			public var labelFieldName:String = "ltname";
			
			private var treeGrid:TreeGrid;
			
			private var mainVbox:VBox = new VBox();
			
			//private var column:DataGridColumn;
			
		    public function init():void{
				
				setDataProvider(dataProvider);
				
			}
			
			private function dealDataTree():void{
				
				if(parentFieldName == null || pkFieldName == null){
					throw new Error("父节点ID与子节点ID不能为空!");
				}
				
				var tempArray:Array = dataProvider.toArray();
				
				createIndexMap(tempArray);
				
				for each(var obj:Object in tempArray){					
					var parentPk:String = obj[parentFieldName];
					var parentObj:Object = null;
					if(parentPk != "" && parentPk != null){
						parentObj = indexMap[parentPk];						
						if(parentObj == null){//数据不全，指定的父节点没有找到
							//SmartXMessage.show("数据不全，指定的父节点【parentPk="+parentPk+"】没有找到");
							obj[parentFieldName] = "";//强制设为根节点
						}else{
							if(!parentObj.hasOwnProperty("children")){
								parentObj["children"] = new ArrayCollection();
							}
							var tempChildren:ArrayCollection = parentObj["children"] as ArrayCollection;
							tempChildren.addItem(obj);
						}
					}
					
				}
				
				dataTree = new ArrayCollection();
				for each(var tempItem:Object in dataProvider){
					var keyValue:String = tempItem[pkFieldName];
					var tempObj:Object = indexMap[keyValue];
					var parentKey:String = tempObj[parentFieldName];
					if(parentKey == null || parentKey ==""){
						dataTree.addItem(tempObj);
					}
				}
				
				treeGrid.dataProvider = dataTree;
				
			}
			
			private function createIndexMap(tempArray:Array):void{
				
				indexMap = new Object()
				
				for each(var obj:Object in tempArray){
					
					var pk:String = obj[pkFieldName];
					indexMap[pk] = obj;
					
				}
			}
			
			public function setDataProvider(dataProvider:ArrayCollection):void{
				
				this.dataProvider = dataProvider;
				
				treeGrid = getNewTreeGrid(columnsArray);
				if(mainVbox.getChildren().length>0){
					mainVbox.removeAllChildren();
				}
				mainVbox.percentHeight = 100;
				mainVbox.percentWidth = 100;
				
				mainVbox.addChild(treeGrid);
				
				if(!this.contains(mainVbox)){
					this.addChild(mainVbox);
				}
				dealDataTree();
				
			}
			
			private function getNewTreeGrid(columnsArray:Array):TreeGrid{
				
				var tg:TreeGrid = new TreeGrid();
				tg.columns = columnsArray;
				tg.percentHeight = 100;
				tg.percentWidth = 100;
				tg.addEventListener(DataGridEvent.HEADER_RELEASE,function(event:DataGridEvent):void{
					var column:DataGridColumn = DataGridColumn(event.currentTarget.columns[event.columnIndex]);
					column.sortCompareFunction = CompareUtil.getSortFunction(column);
//					function(obj1:Object,obj2:Object):int{
//						return sort(obj1,obj2,column.dataField,column);
//					};
				});
				
//				for(var i:int = 0 ; i<columnsArray.length ; i++){
//					var item:DataGridColumn = columnsArray[i];
//					tg.dispatchEvent(new DataGridEvent(DataGridEvent.HEADER_RELEASE,false,false,i,item.dataField));
//				}
				return tg;
				
			}
			
			public function sort(obj1:Object,obj2:Object,columnName:String,column:DataGridColumn):int{
				
				if(!isNaN(obj1[columnName]) && !isNaN(obj2[columnName])){
					return sortNumber(obj1,obj2,columnName,column);
				}
				return sortString(obj1,obj2,columnName,column);
			}
			
			private function sortString(obj1:Object, obj2:Object,columnName:String,column:DataGridColumn):int{
				var str1:String=obj1[columnName];
				var str2:String=obj2[columnName];
				
				if(CompareUtil.hashTotalColumn(obj1)){
					return (column.sortDescending?-1:1)*1;
				}else if(CompareUtil.hashTotalColumn(obj2)){
					return (column.sortDescending?-1:1)*-1;
				}
				
				if(obj1 != null && obj2 == null)
					return -1;
				if(obj1 == null && obj2 != null)
					return 1;
				if(obj1 && obj2){
					return ObjectUtil.stringCompare(CompareUtil.getFirstPinYin(str1),CompareUtil.getFirstPinYin(str2),true);
				}
				return 0;
			}
			
			private function sortNumber(obj1:Object, obj2:Object,columnName:String,column:DataGridColumn):int{
				var num1:Number=Number(obj1[columnName]);
				var num2:Number=Number(obj2[columnName]);
				if(CompareUtil.hashTotalColumn(obj1)){
					return (column.sortDescending?-1:1)*1;
				}else if(CompareUtil.hashTotalColumn(obj2)){
					return (column.sortDescending?-1:1)*-1;
				}else{
					return ObjectUtil.numericCompare(num1,num2);
				}
			}
			
			public function getSelectItem():Object{
				var item:Object = null;
				if(treeGrid!=null){
					item = treeGrid.selectedItem;
				}
				return item;
			}
			
			public function getTreeGrid():TreeGrid{
				return treeGrid;
			}
//			disclosureClosedIcon="@Embed(source='../assets/images/redpoint.png')"
//			disclosureOpenIcon="@Embed(source='../assets/images/redpoint.png')"
		]]>
	</fx:Script>
</mx:VBox>
