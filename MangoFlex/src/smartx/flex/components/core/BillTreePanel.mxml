<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" creationComplete="init()" xmlns:ext="smartx.flex.components.core.ext.*">
	<mx:Metadata>		       
		[Event(name='loadDataSuccessful',type='smartx.flex.components.event.BasicEvent')]
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import com.siloon.plugin.rightClick.RightClickManager;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.controls.Menu;
			import mx.core.FlexGlobals;
			import mx.core.IFlexDisplayObject;
			import mx.events.ListEvent;
			import mx.events.MenuEvent;
			import mx.events.TreeEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.mxml.RemoteObject;
			
			import smartx.flex.components.basic.ClientEnviorment;
			import smartx.flex.components.basic.DeskTopFrame;
			import smartx.flex.components.event.BasicEvent;
			import smartx.flex.components.util.LoadingWindow;
			import smartx.flex.components.util.OperatingTipUtil;
			import smartx.flex.components.util.SmartXMessage;
			import smartx.flex.components.vo.GlobalConst;
			import smartx.flex.components.vo.TableDataStruct;
			
			public var destination:String = GlobalConst.SERVICE_FORM;
		    public var endpoint:String;
		    private var formService:RemoteObject;
		    
		    [Bindable]
        	private var dataTree:ArrayCollection = new ArrayCollection();//树的dataprovider
        	private var indexMap:Object = new Object();//树的hash索引
        	
        	public var treeSql:String;
        	public var loadAll:Boolean = true;
        	private var tableDataStruct:TableDataStruct;
        	public var parentFieldName:String;
        	public var pkFieldName:String;
        	[Bindable]
        	public var labelFieldName:String = "NAME";
        	public var datasource:String;
        	
        	public var seqFieldName:String = null;//用于排序的字段
        	
        	private var sort:Sort = new Sort();
			
			public var rightClickMenuItems:Array = [];
			
			public var rightClickMenu:Menu;
			
			private var operatingWindow:IFlexDisplayObject;
			
			private var desktop:DeskTopFrame = ClientEnviorment.getInstance().getVar(ClientEnviorment.DESKTOP_FRAME) as DeskTopFrame;
			
			[Bindable]
			private var lastSelectedItemId:String;
        	
        	private function init():void{
        		formService = new RemoteObject(destination);
		        if(endpoint!=null)
		        	formService.endpoint = endpoint;
        		formService.getTableDataStructByDS.addEventListener(ResultEvent.RESULT,getTableDataStructByDSHandler);
				formService.getTableDataStructByDS.addEventListener(FaultEvent.FAULT,faultHandler);
        		//定义排序字段
        		if(seqFieldName != null)
					sort.fields = [new SortField(seqFieldName,false,false,true)];
				
				//添加右键菜单
				RightClickManager.regist();
				this.addEventListener(RightClickManager.RIGHT_CLICK,onRightMouseClick);
				rightClickMenu = Menu.createMenu(this,rightClickMenuItems,true);
				//rightClickMenu.addEventListener(MenuEvent.ITEM_CLICK,handleRightMenuClicked);
				rightClickMenu.setStyle("fontSize",12);
        	}
			
			private function onRightMouseClick(event:MouseEvent):void{
				tree.selectItemByMouseEvent(event);
				if(rightClickMenu != null){
					rightClickMenu.hide();
					rightClickMenu.dataProvider = rightClickMenuItems;
					var point:Point = new Point(mouseX,mouseY);
					point = localToGlobal(point);
					var xx:Number = point.x;
					var yy:Number = point.y;
					if(xx + rightClickMenu.width > this.stage.width)
						xx = this.stage.width - rightClickMenu.width - 1;
					if(yy + rightClickMenu.height > this.stage.height)
						yy = this.stage.height - rightClickMenu.height-1;
					rightClickMenu.show(xx,yy); 
				}
			}
        	
        	public function load():void{
        		if(treeSql == null || parentFieldName == null || pkFieldName == null){
        			throw new Error("treeSql、parentFieldName或者pkFieldName不能为空");
        		}
				var selectedItem:Object = tree.selectedItem;
				if(selectedItem != null){
					lastSelectedItemId = selectedItem[pkFieldName];
				}
				
        		indexMap = new Object();
        		dataTree = new ArrayCollection();
        		var sql:String;
				//parentRefPanel.loadall = "false";//测试用 
				if(loadAll)
					sql = "select * from ("+treeSql+") where rownum <= 2000";//限制1000条
				else //分级加载
					sql = "select t.*," + 
							"(select count(1) from ("+treeSql+") t2 where t2."+parentFieldName+"=t."+pkFieldName+") childCount# " + 
							"from ("+treeSql+") t where t."+parentFieldName+" is null";
				
				startOperat();
				formService.getTableDataStructByDS(datasource,sql);
        	}
			
		    private function faultHandler(event:FaultEvent):void{
				endOperat();
				SmartXMessage.show("获取数据结构错误",SmartXMessage.MESSAGE_ERROR,event.fault.faultString);
			}
		
			private function getTableDataStructByDSHandler(event:ResultEvent):void{
				tableDataStruct = event.result as TableDataStruct;
				var headers:Array = tableDataStruct.table_header;
				//构建树
				var tableBody:Array = tableDataStruct.table_body;
				var hasNotLoaded:Boolean = true;
				while(hasNotLoaded){
					hasNotLoaded = false;
					for each(var strRow:Array in tableBody){
						var temp:Object = new Object();
						for(var i:int=0;i<strRow.length;i++){
							temp[headers[i]] = strRow[i];
						}
						
						var pk:String = temp[pkFieldName];
						var parentPk:String = temp[parentFieldName];
						if(indexMap[pk] == null){
							
							//目前的树里面没有
							//先找到它的父节点
							if(parentPk != "" && indexMap[parentPk] == null){
								//父节点也没加载，不正常了额，忽略
								continue;
							}
							else{
								if(parentPk == ""){//是根节点
									dataTree.addItem(temp);
									sortBySeqField(dataTree);
								}
								else{
									var father:Object = indexMap[parentPk];
									if(!father.hasOwnProperty("children"))
										father.children = new ArrayCollection();
									father.children.addItem(temp);
									sortBySeqField(father.children);
								}
								if(!loadAll){
									//如果是分级延迟加载，需要判断该节点是否是叶子节点
									var childCount:int = parseInt(temp["CHILDCOUNT#"]);
									if(childCount > 0)
										temp.children = new ArrayCollection();
								}
								indexMap[pk] = temp;
								hasNotLoaded = true;
							}
						}
					}
				}
				if(loadAll)
					expandAll();
				tree.invalidateList();
				this.validateNow();
				
				selectLastItem();
				
				dispatchEvent(new BasicEvent(BasicEvent.LOADDATA_SUCCESSFUL));
				
				endOperat();
			}
			
			private function selectLastItem():void{
				if(lastSelectedItemId != null ){
					var selectItem:Object = findItemByPkValue(lastSelectedItemId,dataTree);
					if(selectItem != null){
						tree.selectedItem = selectItem;
						var index:int = tree.selectedIndex;
						tree.scrollToIndex(index);
						tree.dispatchEvent(new ListEvent(ListEvent.ITEM_CLICK));
					}
				}
			}
			
			//根据id选中树节点
			public function selectItemByPK(itemid:String):void{
				if(itemid != null ){
					var selectItem:Object = findItemByPkValue(itemid,dataTree);
					if(selectItem != null){
						tree.selectedItem = selectItem;
						var index:int = tree.selectedIndex;
						tree.scrollToIndex(index);
						tree.dispatchEvent(new ListEvent(ListEvent.ITEM_CLICK));
					}
				}
			}
			
			private function findItemByPkValue(pkValue:String,dataProvider:ArrayCollection):Object{
				var tempItem:Object = null;
				for each(var obj:Object in dataProvider){
					var tempPkValue:String = obj[pkFieldName];
					if(tempPkValue != null && tempPkValue == pkValue){
						tempItem = obj;
						break;
					}
					var childData:ArrayCollection = obj.children;
					if(childData != null){
						tempItem = findItemByPkValue(pkValue,childData);
						if(tempItem != null){
							break;
						}
					}
				}
				return tempItem;
			}
			
			private function sortBySeqField(array:ArrayCollection):void{
				if(seqFieldName != null){
					array.sort = sort;
					array.refresh();
				}
			}
			

			private function treeItemOpening(event:TreeEvent):void{
				var item:Object = event.item;
				if(loadAll || !item.children is ArrayCollection)
					return;
				var children:ArrayCollection = item.children as ArrayCollection;
				if(children.length == item["CHILDCOUNT#"])//全加载过了
					return;
				var pk:String = item[pkFieldName];
				var sql:String = "select t.*," + 
							"(select count(1) from ("+treeSql+") t2 where t2."+parentFieldName+"=t."+pkFieldName+") childCount# " + 
							"from ("+treeSql+") t where t."+parentFieldName+"='"+pk+"'";
				
				startOperat();
				formService.getTableDataStructByDS(datasource,sql);
			}
			
			public function getTreeData():ArrayCollection{
				return dataTree;
			}
			
			public function getTreeMap():Object{
				return indexMap;
			}
			
			public function expandAll():void{
				for each(var item:Object in dataTree){
					tree.expandChildrenOf(item,true);
				}
			}
			
			private function startOperat():void{
				OperatingTipUtil.startOperat("正在查询树节点……");
			}
			
			private function endOperat():void{
				OperatingTipUtil.endOperat();
			}
			
		]]>
	</mx:Script>
	<ext:TreeWrapper width="100%" height="100%" labelField="{labelFieldName}" id="tree" dataProvider="{dataTree}" itemOpen="treeItemOpening(event)"/>
</mx:VBox>
