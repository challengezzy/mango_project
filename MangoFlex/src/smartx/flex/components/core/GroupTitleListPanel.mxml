<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:mx="library://ns.adobe.com/flex/mx"
		   xmlns:s="library://ns.adobe.com/flex/spark" 
		   initialize="init()"
		   label="{title}"
		   width="100%" height="100%" xmlns:core="smartx.flex.components.core.*">
	<fx:Metadata>		       
		[Event(name='itemClickSuccessful',type='smartx.flex.components.event.TitleListPanelEvent')]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.ItemResponder;
			import mx.containers.HBox;
			import mx.controls.Image;
			import mx.controls.Label;
			import mx.controls.List;
			import mx.core.IFlexDisplayObject;
			import mx.events.ItemClickEvent;
			import mx.events.ListEvent;
			import mx.formatters.DateFormatter;
			import mx.managers.HistoryManager;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.mxml.RemoteObject;
			
			import smartx.flex.components.assets.AssetsFileLib;
			import smartx.flex.components.basic.ClientEnviorment;
			import smartx.flex.components.basic.portal.ThumbImage;
			import smartx.flex.components.basic.vo.UserHistoryRecordVO;
			import smartx.flex.components.event.TitleListPanelEvent;
			import smartx.flex.components.util.GroupTitleLabel;
			import smartx.flex.components.util.Hashtable;
			import smartx.flex.components.util.SmartXMessage;
			import smartx.flex.components.vo.GlobalConst;
			import smartx.flex.components.vo.SimpleHashVO;
		
		
			private var formService:RemoteObject;
			public  var destination:String = GlobalConst.SERVICE_FORM;
			
			[Bindable]
			public  var endpoint:String;
		
			[Bindable]
			private var currentDP:Array;
		
			[Bindable]
			public var listIcon:Class = AssetsFileLib.redpointIcon;
		
			public var maxRows:int = 1000;
			
			[Bindable]
			public var title:String;
			
			private var groupArray:Array = new Array;
			
			public var currentSelectedList:List;
			
			public var currentSelectedItem:Object;
			
			private var h:Hashtable = new Hashtable();
			
			[Bindable]
			public var labelField:String;
			
			[Bindable]
			public var iconField:String;
			
			[Bindable]
			public var groupField:String;
			
			[Bindable]
			public var tableName:String;
			
			[Bindable]
			public var condition:String;
		
			private function init():void{
		
				formService = new RemoteObject(destination);
				if(endpoint!=null)
				formService.endpoint = endpoint;
		
				formService.getSimpleHashVoArrayByDS.addEventListener(ResultEvent.RESULT,getgetSimpleHashVoArrayByDSHandler);
				formService.getSimpleHashVoArrayByDS.addEventListener(FaultEvent.FAULT,faultHandler);
				
				formService.getSimpleHashVoArrayByDS(null,"select * from "+tableName+" "+condition);
			
			}
		
			private function faultHandler(event:FaultEvent):void{   
				SmartXMessage.show("Error",SmartXMessage.MESSAGE_ERROR,event.fault.faultString, this);
			}
		
			private function getgetSimpleHashVoArrayByDSHandler(event:ResultEvent):void{
				currentDP = event.result as Array;
				for each(var sm:SimpleHashVO in currentDP){
					var groupName:String = sm.dataMap[groupField] as String;
					var gc:ArrayCollection = this.getGroupArrayCollection(groupArray,groupName);
					if(gc.length>0){
						if(iconField != null && iconField != ""){
							sm.dataMap["icon"] = iconField;
						}else{
							sm.dataMap["icon"] = listIcon;
						}
						
						gc.addItem(sm.dataMap);
					}else{
						var obj:Object = new Object();
						
						if(iconField != null && iconField != ""){
							sm.dataMap["icon"] = iconField;
						}else{
							sm.dataMap["icon"] = listIcon;
						}
						
						gc.addItem(sm.dataMap);
						
						obj["groupname"] = groupName;
						obj["groupvalues"] = gc;
						
						groupArray.push(obj);
						
					}
				}
				h.clear();
				for each(var temp:Object in groupArray){
					
					var titleLabel:GroupTitleLabel = new GroupTitleLabel();
					titleLabel.groupTitle = temp["groupname"];
//					titleLabel.addEventListener(MouseEvent.CLICK,titleLabelClickHandler);
					
					var tempArray:ArrayCollection = temp["groupvalues"] as ArrayCollection;
					
					var listChildren:List = new List();
					listChildren.labelField = labelField;
					listChildren.iconField = "icon";
					listChildren.dataProvider = tempArray;
					listChildren.percentWidth = 100;
					listChildren.height =  tempArray.length * 25;
					listChildren.addEventListener(ListEvent.ITEM_CLICK,listItemClickHandler);
					
					mainVbox.addChild(titleLabel);
					mainVbox.addChild(listChildren);
					h.add(titleLabel,listChildren);
				}
				
			}
			
			private function getGroupArrayCollection(array:Array,groupName:String):ArrayCollection{
				
				var values:ArrayCollection;
				
				for each(var obj:Object in array){
					if(obj["groupname"] != null && obj["groupname"] != "" && obj["groupname"] == groupName ){
						values = obj["groupvalues"] as ArrayCollection;
						break;
					}
				}
				
				if(values == null){
					values = new ArrayCollection();
				}
				
				return values;
			}
			
			public function ItemClickSuccessfulHandler(event:TitleListPanelEvent):void{
				var obj:Object = event.itemObj;
			}
			

			protected function titleLabelClickHandler(event:MouseEvent):void
			{
				var lbl:GroupTitleLabel = event.currentTarget as GroupTitleLabel;
				if(h.find(lbl) is List){
					var list:List = h.find(lbl) as List;
					if(mainVbox.contains(list))
						mainVbox.removeChild(list);
					else{
						mainVbox.addChildAt(list,mainVbox.getChildIndex(lbl)+1);
					}
				}
			}
			
			private function listItemClickHandler(event:ListEvent):void{
				
				var tempList:List = event.currentTarget as List;
				
				var temp:Object = tempList.dataProvider.getItemAt(event.rowIndex);
				
				if(this.currentSelectedList !=null){
					this.currentSelectedList.selectedItem = null;
				}
				
				this.currentSelectedList = tempList;
				
				this.currentSelectedList.selectedItem = temp;
				
				this.currentSelectedItem = temp;
			}

		]]>
	</fx:Script>
	<mx:VBox width="100%" height="100%">
		<mx:HBox id="customBtnHbox" width="100%" height="25" horizontalAlign="left"></mx:HBox>
	  	<mx:VBox id="mainVbox" width="100%" height="100%"></mx:VBox>
	</mx:VBox>	
</mx:Canvas>
