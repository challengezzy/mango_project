/**************************************************************************
 * $RCSfile: AfxJNDIServiceUtil.java,v $  $Revision: 1.5 $  $Date: 2007/07/16 06:50:01 $
 **************************************************************************/

package smartx.framework.common.bs;

import java.io.File;
import java.util.Vector;

/**
 * 调用Afx JNDI服务的工具类，从配置文件中读取.根据service1与service2取得Interface类名
 * @author xch
 *
 */
public class AfxJNDIServiceUtil {

	private static AfxJNDIServiceUtil afxJNDIServiceUtil = null;

	private Vector vector = new Vector();

	private AfxJNDIServiceUtil() {
		try {
			org.jdom.input.SAXBuilder builder = new org.jdom.input.SAXBuilder(); //
			org.jdom.Document doc = builder.build(new File(System.getProperty("WebAppRealPath") + "WEB-INF/Nova2Config.xml")); // 加载XML
			org.jdom.Element datasources = doc.getRootElement().getChild("afxservice"); // 得到datasources子结点!!
			if (datasources != null) {
				java.util.List sources = datasources.getChildren(); // 得到所有子结点!!
				for (int i = 0; i < sources.size(); i++) { // 遍历所有子结点!!
					if (sources.get(i) instanceof org.jdom.Element) { //
						org.jdom.Element node = (org.jdom.Element) sources.get(i); //
						String str_service1 = node.getAttributeValue("service1"); // 得到属性
						String str_service2 = node.getAttributeValue("service2"); // 得到属性
						String str_interfacename = node.getAttributeValue("interfacename"); // 得到属性
						String str_implname = node.getAttributeValue("implname"); // 得到属性

						AfxServiceVO vo = new AfxServiceVO(); //
						vo.setService1(str_service1.replace('.', '/')); //
						vo.setService2(str_service2); //
						vo.setInterfaceName(str_interfacename); //
						vo.setImplName(str_implname); //
						vector.add(vo);

						System.out.println("在Nova中注册Afx服务:" + vo.toString()); //
					}
				}
			}

		} catch (Exception ex) {
			ex.printStackTrace();
		}

	}

	public static AfxJNDIServiceUtil getInstance() {
		if (afxJNDIServiceUtil == null) {
			afxJNDIServiceUtil = new AfxJNDIServiceUtil();
		}
		return afxJNDIServiceUtil;
	}

	public String getInterFaceName(String _serviceName) {
		System.out.println("根据服务名[" + _serviceName + "]获取接口名...."); //
		String str_serviceName = _serviceName.replace('.', '/'); //
		for (int i = 0; i < vector.size(); i++) {
			AfxServiceVO vo = (AfxServiceVO) vector.get(i); //
			if (vo.getService1().equals(str_serviceName)) {
				return vo.getInterfaceName();
			}
		}
		return null;
	}

	public String getServiceName1(String _ifcName) {
		for (int i = 0; i < vector.size(); i++) {
			AfxServiceVO vo = (AfxServiceVO) vector.get(i); //
			if (vo.getInterfaceName().equals(_ifcName)) {
				return vo.getService1();
			}
		}
		return null;
	}

	public String getServiceName2(String _ifcName) {
		for (int i = 0; i < vector.size(); i++) {
			AfxServiceVO vo = (AfxServiceVO) vector.get(i); //
			if (vo.getInterfaceName().equals(_ifcName)) {
				return vo.getService2();
			}
		}
		return null;
	}

	class AfxServiceVO {
		private String service1 = null;

		private String service2 = null;

		private String interfaceName = null;

		private String implName = null;

		public String getImplName() {
			return implName;
		}

		public void setImplName(String implName) {
			this.implName = implName;
		}

		public String getInterfaceName() {
			return interfaceName;
		}

		public void setInterfaceName(String interfaceName) {
			this.interfaceName = interfaceName;
		}

		public String getService1() {
			return service1;
		}

		public void setService1(String service1) {
			this.service1 = service1;
		}

		public String getService2() {
			return service2;
		}

		public void setService2(String service2) {
			this.service2 = service2;
		}

		public String toString() {
			return "[" + getService1() + "][" + getService2() + "][" + getInterfaceName() + "][" + getImplName() + "]"; //
		}
	}
}

/*******************************************************************************
 * $RCSfile: AfxJNDIServiceUtil.java,v $ $Revision: 1.5 $ $Date: 2007/07/16 06:50:01 $
 *
 * $Log: AfxJNDIServiceUtil.java,v $
 * Revision 1.5  2007/07/16 06:50:01  shxch
 * *** empty log message ***
 *
 * Revision 1.4  2007/07/12 03:45:39  shxch
 * *** empty log message ***
 *
 * Revision 1.3  2007/07/12 03:44:47  shxch
 * *** empty log message ***
 *
 * Revision 1.2   shxch
 * *** empty log message ***
 *
 ******************************************************************************/

